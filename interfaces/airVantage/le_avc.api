//--------------------------------------------------------------------------------------------------
/**
 * @page c_le_avc AirVantage Connector API
 *
 * @ref le_avc_interface.h "API Reference" <br>
 * @ref legatoServicesAirVantage "AirVantage Connector Platform Service"
 *
 *
 * The AirVantage connector service provides an API to communicate with the AirVantage Server to
 * download and install updates.
 *
 * @section c_le_avc_update Firmware/Application Updates
 *
 * The API for firmware/application update is divided into two parts:
 *  - Allow an App to contact the server for pending updates. If available,
 *    can select to download or install the update.
 *  - Allow an App to block an update from being installed. An App may need this if it's
 *    performing a critical operation that can't be interrupted (e.g., eCall). This is necessary
 *    as installing an update will cause the App to restart (either the App itself needs to restart
 *    or a firmware change causes the modem to reset).
 *
 * @subsection c_le_avc_user_agreement User Agreement
 *
 * By default, user agreements are disabled. This means that avcService automatically accepts
 * requests from the server without asking for user approval: it initiates a connection to the
 * server, download/install packages and reboots the target if needed. Thus, if no control app for
 * the AirVantage service is present on the target, the daemon is still able to update the target.
 *
 * User agreements are persistent to reboot/update, they are stored in the file system. The default
 * settings are only applied when the target boots the first time or when the configuration file is
 * missing or corrupted. In all other cases, default configuration never overwrites the current one.
 *
 * When writing a control app for the AirVantage Service, it is up to the developer to ensure that
 * user agreements have been enabled for all actions the control app performs. Otherwise, avcService
 * will automatically accept server requests. User agreements can be retrieved and updated using
 * le_avc_GetUserAgreement() and le_avc_SetUserAgreement().
 *
 * If user agreements are enabled and avcService can't communicate with the control app to report
 * the pending requests, it waits for 3 minutes and tries again.
 *
 * There are 5 events that require user agreements:
 * - LE_AVC_CONNECTION_PENDING
 * - LE_AVC_DOWNLOAD_PENDING
 * - LE_AVC_INSTALL_PENDING
 * - LE_AVC_REBOOT_PENDING
 * - LE_AVC_UNINSTALL_PENDING
 *
 * An app can respond to these user agreement notifications by opening a connection if the
 * notification is connection pending or by accepting or deferring the operation if the notification
 * is one of download, install, uninstall or reboot pending.
 * If the user agreement is not accepted or deferred, a new notification is returned 30 minutes
 * later.
 *
 * Whether avcService should forward these notifications to an app or act on these notifications by
 * itself is determined by the individual configuration flags that enables or disables user
 * agreement for these operations. If the user agreement flag is turned off for an operation,
 * the default action by avcService is to automatically accept that pending operation. An app can
 * register its handler by calling le_avc_AddStatusEventHandler() described in
 * c_le_avc_update_control and the configuration flags can be set by le_avc_SetUserAgreement().
 *
 * Example of enabling user agreement for LE_AVC_DOWNLOAD_PENDING:
 * @code
        le_result_t result;
        result = le_avc_SetUserAgreement(LE_AVC_USER_AGREEMENT_DOWNLOAD, true);

        if (result != LE_OK)
        {
            LE_ERROR("Failed to enable user agreement for download operation");
        }
 * @endcode
 *
 * @subsection c_le_avc_update_control Update Control
 *
 * Any App can start a session with an AirVantage server to determine if there
 * is a pending update. This is done with le_avc_StartSession().
 *
 * The current session can be stopped using le_avc_StopSession(). This suspends a download in
 * progress if the user agreement for download is activated and change its state to download
 * pending. Otherwise if the user agreement for download is not activated, a new connection is
 * immediatly initiated by AVC in order to resume the download. However, it <b>won't stop</b>
 * an install in progress.
 * The status of a pending update is sent to all Apps registered for receiving a notification.
 * An App can use le_avc_AddStatusEventHandler() to register a handler function to
 * receive this notification. The notification will be received after a session is started.
 *
 * Example of registering an AVC handler and starting a session with fault checking:
 * @code
    // Start AVC Session
    LE_INFO("AirVantage Connection Controller started.");
    le_avc_AddStatusEventHandler(avcStatusHandler, NULL);    //register a AVC handler

    // Start AVC session. Note: AVC handler must be registered prior starting a session
    le_result_t result = le_avc_StartSession();
    if (LE_FAULT == result)
    {
        le_avc_StopSession();
        le_avc_StartSession();
    }
 * @endcode
 *
 * An App can use le_avc_AddCommInfoHandler() to register a handler function and receive
 * communication information notifications. This function returns a reference. To unregister
 * the handler, le_avc_RemoveCommInfoHandler() should be called with the previously returned
 * reference.
 *
 *
 * Sometimes, @c avcService may decide to start a session with the AirVantage
 * server; for instance if a call to le_avc_AcceptDownload() when the session is stopped,
 * @c avcService will open a session to proceed with the download. In this case, a session started
 * notification could also be received, even if le_avc_StartSession() is not called explicitly.
 *
 * @subsubsection c_le_avc_updateControl_pending Pending Updates
 *
 * There can only be one pending update at a time.  To query the type of update, use
 * le_avc_GetUpdateType().  App updates can call le_avc_GetAppUpdateName() to retrieve the App name.
 *
 * If a download is pending, le_avc_AcceptDownload() can be used to allow the update to be
 * downloaded. An AirVantage session will be initiated if this api is called while there is no
 * active AirVantage session. le_avc_DeferDownload() can be used to defer the download for the
 * specified number of minutes. After the defer time has elapsed, the pending download notification
 * will be re-sent again to all registered apps. le_avc_AcceptDownload() can be used to accept the
 * download even before the defer timer expires. This behaviour is true for deferring install
 * and uninstall as well.
 *
 * Once an update has been downloaded, a new notification will be received to indicate that an
 * install is pending. Apps can then use le_avc_AcceptInstall() to allow the install to proceed.
 *
 * If an uninstall is pending, then le_avc_AcceptUninstall() can be used to allow the uninstall to
 * proceed. To defer the decision, le_avc_DeferUninstall() can be used to defer the uninstall for
 * the specified number of minutes. In case of an upgrade, the existing application will not be
 * uninstalled after le_avc_AcceptUninstall() is called. le_avc_AcceptUninstall() is only used to
 * signal the server to start downloading the new application. To proceed with an upgrade process,
 * accept the uninstall of the existing version followed by accepting the download and install of
 * the new version.
 *
 * @code
   switch (updateStatus)
        {
            case LE_AVC_DOWNLOAD_PENDING:
                LE_INFO("Accepting %s update.", GetUpdateType());
                res = le_avc_AcceptDownload();
                if (res != LE_OK)
                {
                    LE_ERROR("Failed to accept download from AirVantage (%s)", LE_RESULT_TXT(res));
                }
                break;

            case LE_AVC_INSTALL_PENDING:
                LE_INFO("Accepting %s installation.", GetUpdateType());
                res = le_avc_AcceptInstall();
                if (res != LE_OK)
                {
                    LE_ERROR("Failed to accept install from AirVantage (%s)", LE_RESULT_TXT(res));
                }
                break;

            case LE_AVC_UNINSTALL_PENDING:
                LE_INFO("Accepting %s uninstall.", GetUpdateType());
                res = le_avc_AcceptUninstall();
                if (res != LE_OK)
                {
                    LE_ERROR("Failed to accept uninstall from AirVantage (%s)", LE_RESULT_TXT(res));
                }
                break;

            case LE_AVC_REBOOT_PENDING:
                LE_INFO("Accepting device reboot.");
                res = le_avc_AcceptReboot();
                if (res != LE_OK)
                {
                    LE_ERROR("Failed to accept reboot from AirVantage (%s)", LE_RESULT_TXT(res));
                }
                break;

            default:
                // No action required
                break;
        }
 * @endcode
 *
 * @note Even if an App calls le_avc_AcceptInstall(), the install may still be blocked by another
 * App using the @ref c_le_avc_update_app functions. To defer the decision, an App can use
 * le_avc_DeferInstall() to defer the install for the specified number of minutes. After the defer
 * time has elapsed, the pending install notification will be re-sent to allow Apps to make a new
 * decision, or again defer.
 *
 * @subsubsection c_le_avc_updateControl_download_end Download and install processes
 *
 * When a package is fully downloaded from the AirVantage server, the device sends a specific
 * message to the server to follow the update process.
 * When the AirVantage server receives this message, it checks the download state and in case of
 * success, it sends the install request to the device.
 * If the user agreement for package install is activated, the @c LE_AVC_INSTALL_PENDING
 * notification is sent. The user needs to accept it in order to launch the install process on
 * device side.
 * If the user agreement for package install is deactivated, the install process on device side
 * is automatically launched.
 * After accepting the install or when the install is automatic, the install process is launched 2
 * seconds later by disconnecting the device from the AirVantage server if it's still connected and
 * by launching the install process (device reboot).
 *
 * @subsubsection c_le_avc_updateControl_accepting Accepting Installs/Uninstalls
 *
 * Accepting an App install or uninstall will not initiate an AirVantage session if no session
 * is active.  An App should start an AirVantage session before accepting an App install/uninstall,
 * to ensure the process is completed, and the server is updated.
 *
 * If no app has registered for notifications using le_avc_AddStatusEventHandler(),
 * then any pending downloads and installs will happen automatically, subject to any restrictions
 * imposed by app using the @ref c_le_avc_update_app functions.
 *
 * There is no restriction on the number of Apps registering for notifications.
 *
 * In case of any error incurred during App download/install, an error code will be set which can be
 * retrieved by calling le_avc_GetErrorCode().
 *
 * @subsection c_le_avc_update_app Application Installation Blocking
 *
 * When an App is about to perform a critical operation, it can block the installation of
 * an update with le_avc_BlockInstall(), and after it's finished with the critical operation, it
 * can unblock the install with le_avc_UnblockInstall().
 *
 * What constitutes a critical operation depends on the App.  An eCall App might
 * block installs for the duration that it runs.  A data collection App that wakes up
 * once an hour might block installs while it collects and stores and/or transmits a new data
 * sample, and then unblock installs just before it goes to sleep again.
 *
 * If an install can't be applied because it's blocked, another attempt to apply the install
 * will be made at a later time.
 *
 * An App can add a session control handler using le_avc_AddSessionRequestEventHandler(). Requests
 * by user Apps to open or close session will be forwarded to the session control handler. If no App
 * has registered a session request handler, AVC session can be opened or closed anytime by
 * user Apps.
 *
 * @subsection c_le_avc_suspend_resume Suspend and resume an update
 *
 * A firmware/application update can be interrupted or suspended by different events:
 * - a device reboot
 * - a network loss
 * - a manual suspend through a session stopped by calling le_avc_StopSession() function
 * - RAM issue
 *
 * After the update suspension, when the @c avcService is ready to resume the update process:
 * - If the user agreements are disabled, the update process is automatically restarted.
 * - If the user agreements are enabled, the previous @c PENDING notification is sent to the App,
 * as indicated in the table below.
 *
 * | Last received event            | Event sent to resume                                        | Expected action from App |
 * |--------------------------------|-------------------------------------------------------------|--------------------------|
 * | @c LE_AVC_DOWNLOAD_PENDING     | @c LE_AVC_DOWNLOAD_PENDING                                  | Accept download          |
 * | @c LE_AVC_DOWNLOAD_IN_PROGRESS | @c LE_AVC_DOWNLOAD_PENDING with remaining bytes to download | Accept download          |
 * | @c LE_AVC_DOWNLOAD_COMPLETE    | @c LE_AVC_DOWNLOAD_PENDING with zero bytes to download      | Accept download          |
 * | @c LE_AVC_INSTALL_PENDING      | @c LE_AVC_INSTALL_PENDING                                   | Accept install           |
 * | @c LE_AVC_INSTALL_IN_PROGRESS  | @c LE_AVC_INSTALL_PENDING                                   | Accept install           |
 * | @c LE_AVC_UNINSTALL_PENDING    | @c LE_AVC_UNINSTALL_PENDING                                 | Accept uninstall         |
 * | @c LE_AVC_CONNECTION_PENDING   | @c LE_AVC_CONNECTION_PENDING                                | Start session            |
 *
 * @note
 * - The @c avcService may not suspend the update process instantly (it typically takes a a few
 * minutes). The @c PENDING notification will only be sent when the suspention is finished. Trying
 * to resume the update process while a suspention is in progress will have no effect.
 * - If firmware is updated (via fwupdate tool) or new legato is installed (via instlegato),
 * all suspend/resume information stored by avcService is erased. So if developer updates firmware
 * or legato (via ethernet or ecm etc.) in the middle of any update initiated by avcService, this
 * need to be cancelled and restarted again from airVantage server.
 *
 * @subsubsection c_le_avc_suspend_resume_agreement Suspend/resume with activated user agreement
 *
 * When a user agreement for package download is activated and a download is suspended
 * (@c LE_AVC_DOWNLOAD_PENDING notification is sent to registered apps), an app can get the download
 * suspend reason by calling le_avc_GetErrorCode() and le_avc_GetHttpStatus() functions.
 * If the download was suspended because of an app request or if the @c LE_AVC_DOWNLOAD_PENDING
 * notification for the 1st time, the returned value by le_avc_GetErrorCode() function is
 * @c LE_AVC_ERR_NONE.
 *
 * If the user agreement for package download is not activated
 * - when a download is suspended by an app, the platform will automatically resume the download.
 * - when a download is suspended because of network loss, the platform will automatically resume
 * the download at next network registration.
 *
 * @subsection c_le_avc_update_failure Update failures
 *
 * A firmware/application update can fail if:
 * - package URL is not valid
 * - flash write issue
 * - in case of delta package, the downloaded package could not be compliant with the current
 * FW/App version
 * - package is not certified sent by a trusted server
 * - integrity check error
 * - install/uninstall error
 *
 * The package URL is considered as invalid when folowing HTTP error codes are received when the
 * package tries to be retrieved:
 * - 404: Not found
 * - 500: Internal Server Error
 * - 501: Not Implemented
 * - 505: HTTP version not supported
 *
 * | Failure reason        | Related event              | Function to be called to get more info |
 * |-----------------------|----------------------------|----------------------------------------|
 * | Invalid package URL   | @c LE_AVC_DOWNLOAD_FAILED  | le_avc_GetHttpStatus()                 |
 * | Flash write error     | @c LE_AVC_DOWNLOAD_FAILED  | le_avc_GetErrorCode()                  |
 * | Invalid delta package | @c LE_AVC_INSTALL_FAILED   | |
 * | integrity check error | @c LE_AVC_DOWNLOAD_FAILED  | |
 * | package not certified | @c LE_AVC_CERTIFICATION_KO | |
 * | install error         | @c LE_AVC_INSTALL_FAILED   | |
 * | uninstall error       | @c LE_AVC_UNINSTALL_FAILED | |
 *
 * Example on checking the download failure reason:
 * @code
        // In AVC event handler
        if (LE_AVC_DOWNLOAD_FAILED == updateStatus)
        {
            int avcError;
            int httpStatus;

            LE_INFO("Download failed");

            // Get the error cause
            avcError = le_avc_GetErrorCode();
            if (LE_AVC_ERR_NONE != avcError)
            {
                LE_WARN("Download failure %d", avcError);
            }

            // Get the HTTP status code
            httpStatus = le_avc_GetHttpStatus();
            if ((200 != httpStatus) && (206 != httpStatus))
            {
                LE_WARN("HTTP status code %d", httpStatus);
            }
        }
 * @endcode
 *
 *
 * @section c_le_avc_Timers Timers
 *
 * Polling timers sets the time that the Target will communicate with the AirVantage Server to check
 * for new jobs.  Retry timers will try and re-establish a connection to the AirVantage Server in
 * accordance with the times that are declared.
 *
 * @subsection c_le_avc_PollingTimer Polling Timer
 *
 * The target will periodically initiate a connection to the AirVantage Server according to the
 * settings for the polling timer to check if there are any pending jobs.  The polling timer will
 * initiate a session when it starts the count (at 0 minutes) and then again at the specified time
 * set.
 *
 * To disable the polling timer call le_avc_SetPollingTimer() and set the value to 0.
 *
 * The polling timer accepts ranges from 0 to 525600 minutes.  The polling timer does not get reset
 * with reboots or power loss.  If the target is powered off during the polling time, it will
 * connect to the AVC Server upon startup of the app.  For example, if the polling timer is set to 1
 * hour then and the target reboots at the 20 minute mark, the polling timer will still initiate a
 * connection at the 1 hour mark.  If the target is powered off or in the middle of rebooting at the
 * 1 hour mark, as soon as the app is started again, the polling timer will initiate a connection to
 * the AirVantage Server.
 *
 * Polling timer initiated sessions will be disconnected after 20 seconds of inactivity. This does
 * not apply to AirVantage sessions that have been initiated by an app. The app is responsible for
 * disconnecting the session it initiates within a reasonable timeframe. Leaving the session open
 * for long period will result in power wastage.
 *
 * To read the polling timer call: le_avc_GetPollingTimer()
 *
 * To write a new value to the polling timer call: le_avc_SetPollingTimer()
 *
 * Writing to the polling timer stops the current polling timer if it is running and starts a timer
 * with the new value. The next connection will be initiated when the new polling timer reaches it's
 * set value.
 *
 * @subsection c_le_avc_RetryTimers Retry Timers
 *
 * If an error occurs during a connection to the Device Services server (WWAN DATA establishment
 * failed and an http error code is received) the embedded module will initiate a new connection
 * according to the values defined in the retry timers.
 *
 * The timers are tried in sequence until a connection is established, or all enabled retry timers
 * are exhausted. After all the enabled timers are exhausted, a new session must be initiated again
 * by calling le_avc_startSession() after the expiry of the retry timer.
 *
 * The retry timer values are persistent (reboots and updates do not effect the retry timers).
 * If you wish to disable a retry timer set the timer value
 * to 0.  You must always pass in at least 8 values to the retry timers.
 *
 * Retry timer values range from 0 to 20160 minutes.
 * The function le_avc_GetRetryTimers() reads the retry timers in an array and the function
 * le_avc_SetRetryTimers() writes the retry timers. When writing to the retry timers, values of
 * all the 8 timers have to be defined.
 *
 * Example of calling retry timers, the session will be retried after 15 minutes, 1 hour, 4 hours,
 * 8 hours, 1 day and 2 days, the last two retries are disabled:
 * @code
   uint16_t RetryTimers[LE_AVC_NUM_RETRY_TIMERS] = {15, 60, 240, 480, 1440, 2880, 0, 0};
   le_avc_SetRetryTimers(RetryTimers, LE_AVC_NUM_RETRY_TIMERS);
 * @endcode
 *
 * @section c_le_avc_reboot Device reboot
 *
 * The AirVantage server can request to reboot the device. If a reboot is requested a notification
 * is sent to the registered Apps. The App can either accept the reboot with le_avc_AcceptReboot()
 * or defer it for a specified number of minutes with le_avc_DeferReboot(). After the defer time
 * has elapsed, the pending reboot notification will be re-sent. This allows the registered app to
 * make a new decision or defer the reboot again.
 *
 * If no App has registered for notifications using le_avc_AddStatusEventHandler(), then
 * any pending reboot will happen automatically.
 *
 * @section c_le_avc_GetCredentialStatus Credential Status
 * The device is provisioned with bootstrap credentials from factory. The Device Management (DM)
 * credentials are provisioned by AirVantage Bootstrap Server. This API is used to retrieve the
 * status of credentials provisioned on the device.
 *
 * @section c_le_avc_connection Connection pending
 *
 * The AirVantage agent can request a connection to the AirVantage server, especially when a
 * firmware package is installed (after a platform reboot) or device reboots in the middle of
 * software update (after finishing software update on reboot). In this case a notification is
 * sent to the control App, which can start the connection with le_avc_StartSession(). If
 * the user agreement is enabled for the connection, and the user enabled the connection,
 * the connection will not  be automatically disconnected without explicit call to
 * le_avc_StopSession()
 *
 * @section c_le_avc_routing Data routing
 *
 * By default the AirVantage connection uses the default mobile data profile and the default route
 * set by the data connection service.
 *
 * If the user wishes to control the network configuration, e.g. to use the AirVantage agent with
 * multi-PDP contexts, they should first bind the application to the data connection service:
 * @verbatim
   bindings:
   {
      clientExe.clientComponent.le_data -> dataConnectionService.le_data
   }
   @endverbatim
 *
 * The data connection service should then be configured before launching the AirVantage connection:
 * - le_data_SetCellularProfileIndex() allows to change the data profile to use.
 * - le_data_GetDefaultRouteStatus() indicates if the default route is activated in the data
 * connection service. This default route can be deactivated in the data connection service
 * configuration database, as explained in @ref c_le_data_defaultRoute. If the default route is
 * deactivated, the AirVantage agent will automatically add routes to be able to reach the
 * AirVantage server through the connection used by AirVantage.
 *
 * @section c_le_avc_timeout Connection / Download timeout
 *
 * The AirVantage connector service will abort FOTA/SOTA download, if it takes more than
 * 300 seconds to establish a connection. Download will also be aborted, if the download speed is
 * too low (less than 100 bytes /second) for too long (for more than 1000 seconds).
 * These values are chosen based on experiments on low speed network. There is no configuration
 * for these timeouts.
 *
 * @section le_avcService_configdb Service Configuration Tree
 * @copydoc le_avcService_configdbPage_Hide
 *
 *
 * Copyright (C) Sierra Wireless Inc.
 */

 /**
 * @interface le_avcService_configdbPage_Hide
 *
 * The configuration database path for the activityTimeout is:
 * @verbatim
 * /
 *     apps/
 *         avcService/
 *                  activityTimeout
 * @endverbatim
 *
 *
 * After an AirVantage session is started, if there's no activity between the device and the server
 * within the timer interval, then LE_AVC_NO_UPDATE state will be returned to the app. However,
 * this activity timeout can be overridden by setting an integer value for
 * /apps/avcService/activityTimeout. The activity timer is initialized only when the @c avcService
 * starts. If a valid entry >0 is found, then it will be used instead of the default value of 20
 * seconds. The following steps should be used to set the activityTimeout.
 *
 *
 * @verbatim
 * config set /apps/avcService/activityTimeout xx int
 * app restart avcService
 * @endverbatim
 *
 * @note
 * Everytime a new value is written to activityTimeout, the avcService needs to be
 * restarted to read the new value.
 *
 *
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * @file le_avc_interface.h
 *
 * Legato @ref c_le_avc include file.
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------
/*
 * Update Control API
 */
//--------------------------------------------------------------------------------------------------


USETYPES le_limit.api;


//--------------------------------------------------------------------------------------------------
/**
 * Maximum APN name length without NULL terminator.
 */
//--------------------------------------------------------------------------------------------------
DEFINE APN_NAME_MAX_LEN = 48;


//--------------------------------------------------------------------------------------------------
/**
 * Maximum APN name length including NULL terminator.
 */
//--------------------------------------------------------------------------------------------------
DEFINE APN_NAME_MAX_LEN_BYTES = APN_NAME_MAX_LEN + 1;


//--------------------------------------------------------------------------------------------------
/**
 * Maximum user name length without NULL terminator.
 */
//--------------------------------------------------------------------------------------------------
DEFINE USERNAME_MAX_LEN = 28;


//--------------------------------------------------------------------------------------------------
/**
 * Maximum user name length including NULL terminator.
 */
//--------------------------------------------------------------------------------------------------
DEFINE USERNAME_MAX_LEN_BYTES = USERNAME_MAX_LEN + 1;


//--------------------------------------------------------------------------------------------------
/**
 * Maximum password length without NULL terminator..
 */
//--------------------------------------------------------------------------------------------------
DEFINE PASSWORD_MAX_LEN = 28;


//--------------------------------------------------------------------------------------------------
/**
 * Maximum password length including NULL terminator.
 */
//--------------------------------------------------------------------------------------------------
DEFINE PASSWORD_MAX_LEN_BYTES = PASSWORD_MAX_LEN + 1;

//--------------------------------------------------------------------------------------------------
/**
 * Maximum number of retry timers.
 */
//--------------------------------------------------------------------------------------------------
DEFINE NUM_RETRY_TIMERS = 8;

//--------------------------------------------------------------------------------------------------
/**
 *  Polling timer value range in minutes. 525600 minutes = 1 year.
 */
//--------------------------------------------------------------------------------------------------
DEFINE POLLING_TIMER_MAX_VAL = 525600;
DEFINE POLLING_TIMER_MIN_VAL = 0;

//--------------------------------------------------------------------------------------------------
/**
 *  Retry timer value range in minutes. 20160 minutes = 2 weeks.
 */
//--------------------------------------------------------------------------------------------------
DEFINE RETRY_TIMER_MAX_VAL = 20160;
DEFINE RETRY_TIMER_MIN_VAL = 0;

//--------------------------------------------------------------------------------------------------
/**
 * Default HTTP status.
 */
//--------------------------------------------------------------------------------------------------
DEFINE HTTP_STATUS_INVALID = 0xFFFF;

//--------------------------------------------------------------------------------------------------
/**
 * Communication info max string size
 */
//--------------------------------------------------------------------------------------------------
DEFINE  COMM_INFO_STR_MAX_LEN = 256;

//--------------------------------------------------------------------------------------------------
/**
 * Maximum length of a LwM2M resource excluding any termination character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE MAX_LWM2M_RESOURCE_LEN = 512;

//--------------------------------------------------------------------------------------------------
/**
 * Maximum length of a LwM2M resource. One extra byte is added for the null character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE MAX_LWM2M_RESOURCE_BYTES = (MAX_LWM2M_RESOURCE_LEN+1);

//--------------------------------------------------------------------------------------------------
/**
 * Communication info codes
 */
//--------------------------------------------------------------------------------------------------
DEFINE COMM_INFO_UDP_NO_ERR                     = 0x00;
DEFINE COMM_INFO_UDP_OPEN_ERR                   = 0x01;
DEFINE COMM_INFO_UDP_CLOSE_ERR                  = 0x02;
DEFINE COMM_INFO_UDP_SEND_ERR                   = 0x03;
DEFINE COMM_INFO_UDP_RECV_ERR                   = 0x04;
DEFINE COMM_INFO_UDP_CONNECT_ERR                = 0x05;
DEFINE COMM_INFO_BEARER_UP                      = 0x06;
DEFINE COMM_INFO_BEARER_DOWN                    = 0x07;
DEFINE COMM_INFO_PDP_CONTEXT                    = 0x08;
DEFINE COMM_INFO_COAP_201_CREATED               = 0x41;
DEFINE COMM_INFO_COAP_202_DELETED               = 0x42;
DEFINE COMM_INFO_COAP_204_CHANGED               = 0x44;
DEFINE COMM_INFO_COAP_205_CONTENT               = 0x45;
DEFINE COMM_INFO_COAP_231_CONTINUE              = 0x5F;
DEFINE COMM_INFO_COAP_400_BAD_REQUEST           = 0x80;
DEFINE COMM_INFO_COAP_401_UNAUTHORIZED          = 0x81;
DEFINE COMM_INFO_COAP_402_BAD_OPTION            = 0x82;
DEFINE COMM_INFO_COAP_404_NOT_FOUND             = 0x84;
DEFINE COMM_INFO_COAP_405_METHOD_NOT_ALLOWED    = 0x85;
DEFINE COMM_INFO_COAP_406_NOT_ACCEPTABLE        = 0x86;
DEFINE COMM_INFO_COAP_408_REQ_ENTITY_INCOMPLETE = 0x88;
DEFINE COMM_INFO_COAP_412_PRECONDITION_FAILED   = 0x8C;
DEFINE COMM_INFO_COAP_413_ENTITY_TOO_LARGE      = 0x8D;
DEFINE COMM_INFO_COAP_500_INTERNAL_SERVER_ERROR = 0xA0;
DEFINE COMM_INFO_COAP_501_NOT_IMPLEMENTED       = 0xA1;
DEFINE COMM_INFO_COAP_503_SERVICE_UNAVAILABLE   = 0xA3;

//--------------------------------------------------------------------------------------------------
/**
 * When used as a Server ID, indicate that the operation is applicable to all servers.
 */
//--------------------------------------------------------------------------------------------------
DEFINE SERVER_ID_ALL_SERVERS = 0xFFFF;

//--------------------------------------------------------------------------------------------------
/**
 * Server ID of the AirVantage server (by convention).
 */
//--------------------------------------------------------------------------------------------------
DEFINE SERVER_ID_AIRVANTAGE = 1;

//--------------------------------------------------------------------------------------------------
/**
 * Config tree root to store the SIM APDU data
 */
//--------------------------------------------------------------------------------------------------
DEFINE CONFIG_TREE_ROOT = "avcService:/";

//--------------------------------------------------------------------------------------------------
/**
 * Config tree entry to store the SIM APDU data
 */
//--------------------------------------------------------------------------------------------------
DEFINE CONFIG_SIM_APDU_PATH = "SIM_APDU";

//--------------------------------------------------------------------------------------------------
/**
 * Config tree entry to store the SIM APDU response
 */
//--------------------------------------------------------------------------------------------------
DEFINE CONFIG_SIM_APDU_RESP_PATH = "SIM_APDU_RESP";

//--------------------------------------------------------------------------------------------------
/**
 * Maximum size of a LwM2M credential
 */
//--------------------------------------------------------------------------------------------------
DEFINE MAX_CREDENTIAL_SIZE = 4096;

//--------------------------------------------------------------------------------------------------
/**
 * Status of session or update
 *
 * If an update is pending, it must first be downloaded and then installed.
 */
//--------------------------------------------------------------------------------------------------
ENUM Status
{
    NO_UPDATE,              ///< No updates pending
    DOWNLOAD_PENDING,       ///< Update pending download
    DOWNLOAD_IN_PROGRESS,   ///< Download in progress
    DOWNLOAD_COMPLETE,      ///< Download has completed
    DOWNLOAD_FAILED,        ///< An error occurred downloading the update
    INSTALL_PENDING,        ///< Install is pending (implies download complete)
    INSTALL_IN_PROGRESS,    ///< Install in progress
    INSTALL_COMPLETE,       ///< Update has been successfully installed
    INSTALL_FAILED,         ///< An error occurred installing the update
    UNINSTALL_PENDING,      ///< Uninstall is pending
    UNINSTALL_IN_PROGRESS,  ///< Uninstall in progress
    UNINSTALL_COMPLETE,     ///< App has been successfully uninstalled
    UNINSTALL_FAILED,       ///< An error occurred uninstalling the update
    SESSION_STARTED,        ///< Session with AirVantage device management server started
    SESSION_BS_STARTED,     ///< Session with bootstrap server started
    SESSION_STOPPED,        ///< Session with AirVantage device management server or bootstrap
                            ///< server stopped
    SESSION_FAILED,         ///< Session with AirVantage device management server or bootstrap
                            ///< server failed
    REBOOT_PENDING,         ///< Device reboot is pending
    CONNECTION_PENDING,     ///< Connection to the server is required. This is necessary when
                            ///< firmware package is installed (after a platform reboot). Also
                            ///< necessary after software update if device reboots(or session stops)
                            ///< in the middle of software update.
    AUTH_STARTED,           ///< Authentication with AirVantage device management server or
                            ///< bootstrap server started
    AUTH_FAILED,            ///< Authentication with AirVantage device management server or
                            ///< bootstrap server failed
    CERTIFICATION_OK,       ///< Package is certified sent by a trusted server
    CERTIFICATION_KO,       ///< Package is not certified sent by a trusted server
    DOWNLOAD_TIMEOUT,       ///< Download timeout
    DOWNLOAD_ABORTED        ///< Download has aborted
};

//--------------------------------------------------------------------------------------------------
/**
 * Operations which require user agreement
 */
//--------------------------------------------------------------------------------------------------
ENUM UserAgreement
{
    USER_AGREEMENT_CONNECTION,      ///< User agreement for connection
    USER_AGREEMENT_DOWNLOAD,        ///< User agreement for download
    USER_AGREEMENT_INSTALL,         ///< User agreement for install
    USER_AGREEMENT_UNINSTALL,       ///< User agreement for uninstall
    USER_AGREEMENT_REBOOT,          ///< User agreement for reboot
};

//--------------------------------------------------------------------------------------------------
/**
 * Request to open or close avms session.
 */
//--------------------------------------------------------------------------------------------------
ENUM SessionRequest
{
    SESSION_ACQUIRE,        ///< Request by user app to open AV session
    SESSION_RELEASE         ///< Request by user app to close AV session
};


//--------------------------------------------------------------------------------------------------
/**
 * The type of pending update
 */
//--------------------------------------------------------------------------------------------------
ENUM UpdateType
{
    UNKNOWN_UPDATE,
    FIRMWARE_UPDATE,
    FRAMEWORK_UPDATE,
    APPLICATION_UPDATE,
    FILE_TRANSFER
};


//--------------------------------------------------------------------------------------------------
/**
 * Error code used to provide diagnostic information after a failure (includes both download and
 * install failure).
 *
 * @note
 *     Additional information may also be available in the target device's system log.
 */
//--------------------------------------------------------------------------------------------------
ENUM ErrorCode
{
    ERR_NONE,                       ///< No error.
    ERR_BAD_PACKAGE,                ///< Encountered a bad package, package download can not be
                                    ///< resumed.
    ERR_INTERNAL,                   ///< Something failed while doing install/download, package
                                    ///< download can not be resumed.
    ERR_SECURITY_FAILURE,           ///< Security check failure while installing the package,
                                    ///< package download can not be resumed.
    ERR_RAM,                        ///< RAM issue during package download, package download can be
                                    ///< resumed but a platform reboot is requires.
    ERR_NETWORK,                    ///< Network issue during package download (IP issues), package
                                    ///< download can be resumed.
    ERR_FLASH,                      ///< Flash issue during package download, package download can
                                    ///< not be resumed.
    ERR_PKG_TOO_BIG                 ///< Not enough space in flash to store the package
};


//--------------------------------------------------------------------------------------------------
/**
 * Session type indicates whether the device is connected to the bootstrap server or the
 * device management server.
 */
//--------------------------------------------------------------------------------------------------
ENUM SessionType
{
    BOOTSTRAP_SESSION,              ///< Bootstrap session.
    DM_SESSION,                     ///< Device Management session.
    SESSION_INVALID                 ///< Session type invalid.
};

//--------------------------------------------------------------------------------------------------
/**
 * Status of the device credentials
 */
//--------------------------------------------------------------------------------------------------
ENUM CredentialStatus
{
    NO_CREDENTIAL_PROVISIONED = 1,  ///< Neither Bootstrap nor Device Management
                                    ///< credential is provisioned.
    BS_CREDENTIAL_PROVISIONED,      ///< Bootstrap credential is provisioned but Device
                                    ///< Management credential is not provisioned.
    DM_CREDENTIAL_PROVISIONED       ///< Device Management credential is provisioned.
};

//--------------------------------------------------------------------------------------------------
/**
 * Type of the configuration to pass to the API
 */
//--------------------------------------------------------------------------------------------------
ENUM ConfigType
{
    CONFIG_TYPE_SIM_APDU_RESPONSE = 1   ///< SIM APDU response
};

//--------------------------------------------------------------------------------------------------
/**
 * Type of the credential to set
 */
//--------------------------------------------------------------------------------------------------
ENUM CredentialType
{
    SW_PUBLIC_KEY,        ///< Software public key
    FW_PUBLIC_KEY,        ///< Firmware public key
    BS_SERVER_ADDRESS,    ///< Bootstrap server address
    BS_PSK_ID,            ///< Bootstrap pre-shared key identity
    BS_PSK                ///< Bootstrap pre-shared key
};

//--------------------------------------------------------------------------------------------------
/**
 * Handler for update availability status
 */
//--------------------------------------------------------------------------------------------------
HANDLER StatusHandler
(
    Status updateStatus IN,         ///< status of pending update, if available
    int32 totalNumBytes IN,         ///< Total number of bytes to be downloaded
                                    ///< only valid when updateStatus is one of
                                    ///< DOWNLOAD_PENDING, DOWNLOAD_IN_PROGRESS or DOWNLOAD_COMPLETE.
                                    ///< returns -1 if value is unknown
    int32 progress IN               ///< Task completion in percentage
                                    ///< Valid when updateStatus is one of DOWNLOAD_IN_PROGRESS,
                                    ///< INSTALL_IN_PROGRESS or UNINSTALL_IN_PROGRESS.
                                    ///< returns -1 if value is unknown
);


//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on update availability status
 */
//--------------------------------------------------------------------------------------------------
EVENT StatusEvent
(
    StatusHandler handler
);


//--------------------------------------------------------------------------------------------------
/**
 * Handler for receiving session open or close request.
 */
//--------------------------------------------------------------------------------------------------
HANDLER SessionRequestHandler
(
    SessionRequest request IN    ///< Request to open or close AV session
);


//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on session open or close request.
 */
//--------------------------------------------------------------------------------------------------
EVENT SessionRequestEvent
(
    SessionRequestHandler handler
);


//--------------------------------------------------------------------------------------------------
/**
 * Handler for receiving communication information.
 */
//--------------------------------------------------------------------------------------------------
HANDLER CommInfoHandler
(
    uint8   code                        IN, ///< Communication information code
    string  str[COMM_INFO_STR_MAX_LEN]  IN  ///< Communication information string
);


//--------------------------------------------------------------------------------------------------
/**
 * This event provides communication errors.
 */
//--------------------------------------------------------------------------------------------------
EVENT CommInfo
(
    CommInfoHandler handler
);


//--------------------------------------------------------------------------------------------------
/**
 * Start a session with the AirVantage server
 *
 * This will cause a query to be sent to the server, for pending updates.
 *
 * @return
 *      - LE_OK if connection request has been sent.
 *      - LE_FAULT on failure
 *      - LE_DUPLICATE if already connected.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t StartSession
(
);


//--------------------------------------------------------------------------------------------------
/**
 * Start a session with a specific Device Management (DM) server.
 *
 * This function is similar to le_avc_StartSession(), with the main difference of adding extra
 * parameter to specify the Server ID of the DM server; this way, it provides flexibility to
 * connect to any DM server, not just AirVantage.
 *
 * For example, the device may need to communicate with EDM server that is providing support
 * for the SIM Reachability features (LWM2M proprietory object 33408).
 *
 * Reserved Server IDs are:
 * 0 for Bootstrap server
 * 1 for AirVantage server
 * 1000 for EDM server
 *
 * @note DM servers may have different capabilities in terms of which LWM2M objects they support.
 * For instance, EDM server supports only one specific type of object (Object 33408), and does
 * not support Objects 5 and 9, which means it doesn't allow SOTA/FOTA operations.
 *
 * @note To initiate a session with AirVantage server, it's preferable to use le_avc_StartSession()
 * which exists specifically for this purpose.
 *
 * @note If the device doesn't have credentials for the specificed DM server, the boostrapping
 * process will be automatically initiated.
 *
 * @return
 *      - LE_OK if connection request has been sent.
 *      - LE_FAULT on failure
 *      - LE_DUPLICATE if already connected to the server.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t StartDmSession
(
    uint16  serverId            IN, ///< Short ID of the DM server. If equals to ALL_SERVERS, the
                                    ///<   session will be started with all available DM servers.
    bool    isAutoDisconnect    IN  ///< Whether the session should be auto disconnected
);


//--------------------------------------------------------------------------------------------------
/**
 * Stop a session with the DM server
 *
 * If a download is in progress and the user agreement is enabled, this suspends the download,
 * otherwise if the user agreement is disabled, a new connection is automatically initiated in order
 * to resume the download.
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT on failure
 *      - LE_DUPLICATE if already disconnected
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t StopSession
(
);


//--------------------------------------------------------------------------------------------------
/**
 * Send a specific message to the server to be sure that the route between the device and the server
 * is available.
 * This API needs to be called when any package download is over (successfully or not) and before
 * sending any notification on asset data to the server.
 *
 * @return
 *      - LE_OK when the treatment is launched
 *      - LE_FAULT on failure
 *      - LE_UNSUPPORTED when the API is not supported
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t CheckRoute
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Defer the currently pending connection, for the given number of minutes
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT on failure
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t DeferConnect
(
    uint32 deferMinutes IN
);

//--------------------------------------------------------------------------------------------------
/**
 * Accept the currently pending download
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT on failure
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t AcceptDownload
(
);


//--------------------------------------------------------------------------------------------------
/**
 * Defer the currently pending download, for the given number of minutes
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT on failure
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t DeferDownload
(
    uint32 deferMinutes IN
);


//--------------------------------------------------------------------------------------------------
/**
 * Accept the currently pending install
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT on failure
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t AcceptInstall
(
);


//--------------------------------------------------------------------------------------------------
/**
 * Defer the currently pending install
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT on failure
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t DeferInstall
(
    uint32 deferMinutes IN
);

//--------------------------------------------------------------------------------------------------
/**
 * Accept the currently pending uninstall
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT on failure
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t AcceptUninstall
(
);


//--------------------------------------------------------------------------------------------------
/**
 * Defer the currently pending uninstall
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT on failure
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t DeferUninstall
(
    uint32 deferMinutes IN
);


//--------------------------------------------------------------------------------------------------
/**
 * Accept the currently pending reboot
 *
 * @note When this function is called, a 2-second timer is launched and the reboot function is
 * called when the timer expires.
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT on failure
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t AcceptReboot
(
);


//--------------------------------------------------------------------------------------------------
/**
 * Defer the currently pending reboot
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT on failure
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t DeferReboot
(
    uint32 deferMinutes IN
);


//--------------------------------------------------------------------------------------------------
/**
 * Get the update type of the currently pending update
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT if not available
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetUpdateType
(
    UpdateType   updateType OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Get the name for the currently pending app update
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT if not available, or isn't APPL_UPDATE type
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetAppUpdateName
(
    string updateName[le_limit.APP_NAME_LEN] OUT
);


//--------------------------------------------------------------------------------------------------
/*
 * Application Blocking API
 */
//--------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------
/**
 * Reference returned by BlockInstall function and used by UnblockInstall function
 */
//--------------------------------------------------------------------------------------------------
REFERENCE BlockRequest;


//--------------------------------------------------------------------------------------------------
/**
 * Prevent any pending updates from being installed.
 *
 * @return
 *      - Reference for block update request (to be used later for unblocking updates)
 *      - NULL if the operation was not successful
 */
//--------------------------------------------------------------------------------------------------
FUNCTION BlockRequest BlockInstall
(
);


//--------------------------------------------------------------------------------------------------
/**
 * Allow any pending updates to be installed
 */
//--------------------------------------------------------------------------------------------------
FUNCTION UnblockInstall
(
    BlockRequest blockRef IN   ///< block request ref returned by le_avc_BlockInstall
);


//--------------------------------------------------------------------------------------------------
/**
 * Function to get error code when update fails.
 *
 * @return
 *      - Error code of encountered error.
 *      - ERR_NONE if update is in any other state.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION ErrorCode GetErrorCode
(
);


//--------------------------------------------------------------------------------------------------
/**
 * Function to read the current session type, or the last session type if there is no
 * active session.
 *
 * @return
 *      - SessionType
 */
//--------------------------------------------------------------------------------------------------
FUNCTION SessionType GetSessionType
(
);


//--------------------------------------------------------------------------------------------------
/**
 * Function to read the http status of the last download.
 *
 * @return
 *      - HttpStatus as defined in RFC 7231, Section 6.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION uint16 GetHttpStatus
(
);


//--------------------------------------------------------------------------------------------------
/**
 * Function to read the polling timer.
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT if not available
 *      - LE_OUT_OF_RANGE if the polling timer value is out of range (0 to 525600).
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetPollingTimer
(
    uint32  pollingTimer OUT    ///< Polling timer interval, minutes
);


//--------------------------------------------------------------------------------------------------
/**
 * Function to read the retry timers.
 *
 * @return
 *      - LE_OK on success.
 *      - LE_FAULT if not able to read the timers.
 *      - LE_OUT_OF_RANGE if one of the retry timers is out of range (0 to 20160).
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetRetryTimers
(
    uint16 timerValue[NUM_RETRY_TIMERS]   OUT ///< Array of retry timer intervals, minutes.
);


//--------------------------------------------------------------------------------------------------
/**
 * Function to read APN configuration.
 *
 * @return
 *      - LE_OK on success.
 *      - LE_FAULT if there is any error while reading.
 *      - LE_OVERFLOW if the buffer provided is too small.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetApnConfig
(
    string apnName[APN_NAME_MAX_LEN]   OUT,
    string userName[USERNAME_MAX_LEN]  OUT,
    string userPwd[PASSWORD_MAX_LEN]   OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Function to write APN configuration.
 *
 * @return
 *      - LE_OK on success.
 *      - LE_OVERFLOW if one of the input strings is too long.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetApnConfig
(
    string apnName[APN_NAME_MAX_LEN]    IN,
    string userName[USERNAME_MAX_LEN]   IN,
    string userPwd[PASSWORD_MAX_LEN]    IN
);


//--------------------------------------------------------------------------------------------------
/**
 * Function to set the polling timer to a value in minutes.
 *
 * @return
 *      - LE_OK on success.
 *      - LE_OUT_OF_RANGE if the polling timer value is out of range (0 to 525600).
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetPollingTimer
(
    uint32  pollingTimer IN    ///< Polling timer interval, minutes
);


//--------------------------------------------------------------------------------------------------
/**
 * Function to set the retry timers.
 *
 * @return
 *      - LE_OK on success.
 *      - LE_FAULT if not able to set the timers.
 *      - LE_OUT_OF_RANGE if one of the retry timers is out of range (0 to 20160).
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetRetryTimers
(
    uint16 timerValue[NUM_RETRY_TIMERS]   IN  ///< Array of retry timer intervals, minutes.
);

//--------------------------------------------------------------------------------------------------
/**
 * Function to retrieve status of the credentials provisioned on the device.
 *
 * @return
 *     LE_AVC_NO_CREDENTIAL_PROVISIONED
 *          - If neither Bootstrap nor Device Management credential is provisioned.
 *     LE_AVC_BS_CREDENTIAL_PROVISIONED
 *          - If Bootstrap credential is provisioned but Device Management credential is
              not provisioned.
 *     LE_AVC_DM_CREDENTIAL_PROVISIONED
 *          - If Device management key is provisioned.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION CredentialStatus GetCredentialStatus
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Function to set user agreements for download, install, reboot, connection and uninstall.
 *
 * @return
 *      - LE_OK on success.
 *      - LE_FAULT if failed to configure user agreement.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetUserAgreement
(
    UserAgreement updateStatus IN,         ///< Operation for which user agreements has to be set.
    bool enable IN                         ///< true = enable, false = disable.
);

//--------------------------------------------------------------------------------------------------
/**
 * Function to get user agreements for download, install, reboot, connection and uninstall.
 *
 * @return
 *      - LE_OK on success.
 *      - LE_FAULT if failed to read user agreement state.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetUserAgreement
(
    UserAgreement updateStatus IN,         ///< Operation for which user agreements has to be read.
    bool enable OUT                        ///< true = enable, false = disable.
);

//--------------------------------------------------------------------------------------------------
/**
 * Function to read a resource from a LWM2M object
 *
 * @return
 *      - LE_OK on success.
 *      - LE_FAULT if failed.
 *      - LE_UNSUPPORTED if unsupported.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t ReadLwm2mResource
(
    uint16 objectId IN,                           ///< Object identifier
    uint16 objectInstanceId IN,                   ///< Object instance identifier
    uint16 resourceId IN,                         ///< Resource identifier
    uint16 resourceInstanceId IN,                 ///< Resource instance identifier
    string data[MAX_LWM2M_RESOURCE_BYTES] OUT     ///< String of requested resources to be read
);

//--------------------------------------------------------------------------------------------------
/**
 * Function to set the NAT timeout
 *
 * This function sets the NAT timeout in volatile memory.
 * When data need to be sent by the client, a check is made between this NAT timeout value and the
 * time when last data were received from the server or sent to the server.
 * If one of these times is greater than the NAT timeout, a DTLS resume is initiated.
 * Default value if this function is not called: 40 seconds.
 * Value 0 will deactivate any DTLS resume.
 * This function can be called at any time.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION SetNatTimeout
(
    uint32 timeout IN                             ///< Timeout (unit: seconds)
);

//--------------------------------------------------------------------------------------------------
/**
 * Check whether the session is started for a given Server Id.
 *
 * @return
 *      - true if session is started
 *      - false otherwise
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsSessionStarted
(
    uint16 serverId IN                  ///< Short Server ID
);

//--------------------------------------------------------------------------------------------------
/**
 * Provision a credential used for connecting to AirVantage.
 *
 * @return
 *      - LE_OK on success.
 *      - LE_FAULT if failed.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetCredential
(
    CredentialType credType                  IN,  ///< Credential type
    uint16         serverId                  IN,  ///< LwM2M server identity
    uint8          cred[MAX_CREDENTIAL_SIZE] IN   ///< Credential
);
