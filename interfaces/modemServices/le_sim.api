//--------------------------------------------------------------------------------------------------
/**
 * @page c_sim SIM
 *
 * @ref le_sim_interface.h "API Reference" <br>
 * @ref platformConstraintsSim "SIM constraints"
 *
 * <HR>
 *
 * This file contains prototype definitions for SIM API.
 *
 * A subscriber identity module or subscriber identification module (SIM) is an integrated circuit
 * that securely stores the international mobile subscriber identity (IMSI) and related key used to
 * identify and authenticate subscribers on M2M devices.
 *
 * Most SIM cards can store a number of SMS messages and phone book contacts.
 *
 * @section le_sim_binding IPC interfaces binding
 *
 * All the functions of this API are provided by the @b modemService.
 *
 * Here's a code sample binding to modem services:
 * @verbatim
   bindings:
   {
      clientExe.clientComponent.le_sim -> modemService.le_sim
   }
   @endverbatim
 *
 *
 * @section le_sim_SelectCard Select a card to use
 * le_sim_SelectCard() function is used to select the SIM identifier. By default, the SIM in slot 1
 * is used unless the automatic SIM selection is enabled. See @ref le_sim_AutomaticSelection for
 * further details.
 * Additionally, any Legato SIM API with a SIM card identifier passed in parameter, selects that
 * SIM identifier. le_sim_GetSelectedCard() returns the current selected card, not necessarily the
 * one set previously by le_sim_SelectCard().
 *
 * @note The SIM selection is not reset persistent; this function has to be called at each start-up.
 *
 * @note It is recommended to wait for a SIM handler notification after a new SIM selection before
 * calling le_sim API functions.
 *
 * A sample code can be seen in the following page:
 * - @subpage c_simTestSelect
 *
 * @section le_sim_AutomaticSelection Automatic SIM selection
 * This feature is only relevant for modules with an internal SIM card. When enabled, the module
 * automatically selects a SIM slot according to the rule: "If an external SIM is inserted in slot 1
 * then select it. Otherwise, fall back to the internal SIM card".
 *
 * Use the following APIs to manage the feature:
 * - le_sim_SetAutomaticSelection(): Enable/Disable the automatic SIM selection.
 * - le_sim_GetAutomaticSelection(): Get the current automatic SIM selection state.
 *
 * @note Most of le_sim APIs require a SIM identifier in their arguments. If a client application
 * uses a SIM identifier different from the one selected by automatic SIM selection, the feature
 * will be immediately disabled.
 * Thus, in order to use le_sim APIs in automatic SIM selection, client application must use
 * LE_SIM_UNSPECIFIED as a SIM identifier (@ref le_sim_Id_t).
 *
 *
 * @section le_sim_id SIM identification information
 * \b ICCID:
 * Each SIM is internationally identified by its integrated circuit card identifier (ICCID). ICCIDs
 * are stored in the SIM cards and engraved or printed on the SIM card body.
 * The ICCID is defined by the ITU-T recommendation E.118 as the
 * Primary Account Number. According to E.118, the number is up to 19 digits long, including a
 * single check digit calculated using the Luhn algorithm. However, the GSM Phase 1 (ETSI
 * Recommendation GSM 11.11) defined the ICCID length as 10 octets (20 digits) with
 * operator-specific structure.
 *
 * le_sim_GetICCID() API reads the identification number (ICCID).
 * le_sim_AddIccidChangeHandler() function registers a handler to be notified when ICCID changes.
 * le_sim_RemoveIccidChangeHandler() function unregisters the handler.
 *
 * @note During the initialization phase of the service, each new subscription to the ICCID change
 * event is notified by the last change event. This behavior lasts only for 5 seconds and allows
 * freshly registered clients to receive any ICCID changes that occured during the module start-up
 * phase.
 *
 * Using this API selects the requested SIM.
 *
 * \b IMSI:
 * The International Mobile Subscriber Identity or IMSI is a unique identification associated with
 * all cellular networks. The IMSI is used in any mobile network that connects with other
 * networks. For GSM, UMTS and LTE network, this number is provisioned in the SIM card.
 *
 * An IMSI is usually presented as a 15 digit long number, but can be shorter. The first 3 digits
 * are the mobile country code (MCC), are followed by the mobile network code (MNC), either 2
 * digits (European standard) or 3 digits (North American standard). The length of the MNC depends
 * on the value of the MCC. The remaining digits are the mobile subscription identification number
 * (MSIN) within the network's customer base.
 *
 * \b EID:
 * The EID (also called eUICCID) is the unique identifier for the embedded Universal Integrated
 * Circuit Card (eUICC).
 * A eUICC is a SIM card with a remote provisioning function, and is designed to not be removed or
 * changed. It is able to store multiple communication profiles but only one is enabled (recognized
 * by the device and used for communication). With conventional SIM cards, the ICCID is used as the
 * unique key to identify the SIM card, but with eUICC, the ICCID is the key used to identify a
 * profile, and a new identifier is defined, called the eUICCID (EID), which is used as the unique
 * key for the embedded SIM.
 * le_sim_GetEID() API reads the EID.
 *
 * \b Home \b Network \b Name:
 * le_sim_GetHomeNetworkOperator() retrieves the Home Network Name.
 *
 * le_sim_GetIMSI() API reads the international mobile subscriber identity (IMSI).
 *
 * Using this API selects the requested SIM.
 *
 * \b Phone \b Number:
 * le_sim_GetSubscriberPhoneNumber() API reads the Phone Number associated to the SIM.
 * If the phone number has not been provisioned, it will return the empty string.
 *
 * Using this API selects the requested SIM.
 *
 * \b Home \b Network \b Information:
 * - le_sim_GetHomeNetworkOperator()function retrieves the Home Network Name.
 * - le_sim_GetHomeNetworkMccMnc()function retrieves the Home Network MCC (Mobile Country Code)
 *      and MNC (Mobile Network Code).
 *
 * A sample code can be seen in the following page:
 * - @subpage c_simTestIdentification
 *
 * @section le_sim_auth SIM Authentication
 * le_sim_EnterPIN() enters the PIN (Personal Identification Number) code that's
 * required before any Mobile equipment functionality can be used.
 *
 * Using this API selects the requested SIM.
 *
 * le_sim_GetRemainingPINTries() returns the number of remaining PIN entry attempts
 * before the SIM will become blocked.
 *
 * Using this API selects the requested SIM.
 *
 * le_sim_GetRemainingPUKTries() returns the number of remaining PUK entry attempts
 * before the SIM will become blocked.
 *
 * Using this API selects the requested SIM.
 *
 * le_sim_ChangePIN() must be called to change the PIN code.
 *
 * Using this API selects the requested SIM.
 *
 *  le_sim_Lock() locks the SIM card: it enables requests for the PIN code.
 *
 * Using this API selects the requested SIM.
 *
 *  le_sim_Unlock() unlocks the SIM card: it disables requests for the PIN code.
 *
 * Using this API selects the requested SIM.
 *
 * le_sim_Unblock() unblocks the SIM card. The SIM card is blocked after X unsuccessful
 * attempts to enter the PIN. le_sim_Unblock() requires the PUK (Personal Unblocking) code
 * to set a new PIN code.
 *
 * A sample code can be seen in the following page:
 * - @subpage c_simTestAuthentication
 *
 * @section le_sim_state SIM states
 * le_sim_IsPresent() API advises the SIM is inserted (and locked) or removed.
 *
 * Using this API selects the requested SIM.
 *
 * le_sim_IsReady() API advises the SIM is ready (PIN code correctly entered
 * or not required).
 *
 * Using this API selects the requested SIM.
 *
 * The le_sim_GetState() API retrieves the SIM state:
 * - LE_SIM_INSERTED      : SIM card is inserted and locked.
 * - LE_SIM_ABSENT        : SIM card is absent.
 * - LE_SIM_READY         : SIM card is inserted and unlocked.
 * - LE_SIM_BLOCKED       : SIM card is blocked.
 * - LE_SIM_BUSY          : SIM card is busy.
 * - LE_SIM_POWER_DOWN    : SIM card is powered down.
 * - LE_SIM_STATE_UNKNOWN : Unknown SIM state.
 *
 * Using this API selects the requested SIM.
 *
 * A handler function must be registered to receive SIM's state notifications.
 * le_sim_AddNewStateHandler() API allows the User to register that handler.
 *
 * The handler must satisfy the following prototype:
 * typedef void(*le_sim_NewStateHandlerFunc_t)(@ref le_sim_Id_t simId, @c le_sim_States_t simState);
 *
 * When a new SIM's state is notified, the handler is called.
 *
 * Call le_sim_GetState() to retrieve the new state of the SIM.
 *
 * @note If two (or more) applications have registered a handler function for notifications, they
 * will all receive it and will be passed the same SIM.
 *
 * The application can uninstall the handler function by calling le_sim_RemoveNewStateHandler() API.
 *
 * @warning Your platform might need a reboot to detect a SIM insertion or removal.
 * Please refer to the @ref platformConstraintsSim "SIM constraints" page or your platform
 * documentation for further details.
 *
 * A sample code can be seen in the following page:
 * - @subpage c_simTestStates
 *
 * le_sim_SetPower() powers up or down the current SIM card.
 *
 * @section le_sim_profile_switch SIM profile switch
 *
 * As soon as there are several subscriptions/profiles in the eUICC (multi-profile), and one of
 * them is dedicated to emergency calls (ex: eCall, ERA-Glonass), local swap is needed to swap as
 * quickly as possible to the emergency profile in case of need.
 *
 * “Local swap” means that the User's application must be able to directly request the eUICC to
 * swap to Emergency Call Subscription (ECS).
 *
 * Local swap puts the eUICC in a temporary state, meaning the commercial subscription is replaced
 * by emergency subscription for a limited time, event triggering the swap back to commercial
 * subscription being controlled by the User's application.
 *
 * The le_sim_LocalSwapToEmergencyCallSubscription() function requests the multi-profile eUICC to
 * swap to ECS and to refresh. The User's application must wait for eUICC reboot to be finished and
 * network connection available.
 *
 * The le_sim_LocalSwapToCommercialSubscription() function requests the multi-profile eUICC to swap
 * back to commercial subscription and to refresh. The User's application must wait for eUICC reboot
 * to be finished and network connection available.
 *
 * eUICC allows support of multiple SIM profiles. These profiles can also be managed remotely from
 * a Subscription Manager Server. Changing the SIM profile remotely may impact the customer
 * application especially if there is an ongoing data transmission. To prevent any data loss,
 * switching SIM profiles is subject to a user agreement. This way, the customer application will
 * be able to properly finalize its current procedure (emergency call for instance) before accepting
 * the SIM swap.
 *
 * The application can subscribe a handler using le_sim_AddProfileUpdateHandler() to monitor SIM
 * profile change requests. Thus, the application can choose to accept or reject the SIM profile
 * swap procedure using le_sim_AcceptSimToolkitCommand() or le_sim_RejectSimToolkitCommand().
 *
 * @warning
 * If there is no subscribed handler, the SIM service automatically accepts any SIM profile swap
 * request.
 *
 * The User's application can install a handler with le_sim_AddNewStateHandler() to receive eUICC's
 * state notifications.
 *
 * @warning
 * - If you use a Morpho or Oberthur card, the SIM_REFRESH PRO-ACTIVE command must be accepted with
 *   le_sim_AcceptSimToolkitCommand() in order to complete the profile swap procedure.
 * - If you use a Giesecke & Devrient (G&D) card, be sure that your platform has disabled
 *   security restrictions for channel management APDU commands, otherwise local SIM profile switch
 *   could not work.
 *
 * The le_sim_IsEmergencyCallSubscriptionSelected() function must be called to get the current
 * subscription.
 *
 * @warning There is no standard method to interrogate the current selected subscription. The
 * returned value of this function is based on the last executed local swap command. This means
 * that this function will always return LE_NOT_FOUND error at Legato startup.
 *
 * A sample code can be seen in the following page:
 * - @subpage c_simTestProfileSwitch
 *
 * @section le_sim_Reset SIM Reset
 *
 * The le_sim_Reset() function resets the SIM card.
 *
 * @section le_sim_FPLMNList Read / Write FPLMN List from SIM
 *
 * The le_sim_CreateFPLMNList() function creates the empty FPLMN list.
 *
 * The le_sim_AddFPLMNOperator() function adds the FPLMN network into FPLMN list.
 *
 * The le_sim_WriteFPLMNList() function writes FPLMN list into the SIM.
 *
 * The le_sim_ReadFPLMNList() function reads the FPLMN list from the SIM card.
 *
 * The le_sim_GetFirstFPLMNOperator() function fetches the first FPLMN operator from FPLMN list.
 *
 * The le_sim_GetNextFPLMNOperator() function fetches the next FPLMN operator from FPLMN list.
 *
 * The le_sim_DeleteFPLMNList() function releases all allocated resources associated with the
 * List object.
 *
 * @note Some platforms do not support FPLMN APIs. Please refer to the @ref platformConstraintsSim
 * "SIM constraints" page or your platform documentation for further details.
 *
 * @section le_sim_stk SIM Toolkit
 *
 * The SIM application Toolkit allows the SIM card to initiate commands or asking input from the
 * modem to accept/reject SIM operations.
 *
 * One of the use case is the remote provisioning of an embedded UICC (eUICC): the eUICC format
 * supports multiple subscription profiles, which can be remotely provisioned, updated or selected
 * through SIM Toolkit procedures (Bearer Independent Protocol @em BIP, SIM refresh).
 *
 * It is mainly used for in-vehicle emergency call service (eCall).
 *
 * An eUICC can be remotely managed to change the Mobile Network Operator subscription.
 *
 * The le_sim_AddSimToolkitEventHandler() API registers a handler to be notified of SIM
 * Toolkit events. The le_sim_RemoveSimToolkitEventHandler() API unregisters the handler.
 *
 * The last received SIM Toolkit command can:
 * - Either be accepted by the device with the le_sim_AcceptSimToolkitCommand() API
 * - Or be rejected by the device with the le_sim_RejectSimToolkitCommand() API.
 * Note that if no handler is registered, refresh requests are automatically accepted.
 *
 * In case the last SIM Toolkit command is a Refresh command (@ref LE_SIM_REFRESH), additional
 * information can be retrieved:
 * - The le_sim_GetSimToolkitRefreshStage() API gets the stage of the Refresh command.
 * - The le_sim_GetSimToolkitRefreshMode() API gets the mode of the Refresh command, as defined in
 *   ETSI TS 102 223 sections 6.4.7 and 8.6.
 *
 * A sample code using the SIM Toolkit APIs can be seen in the following page:
 * - @subpage c_simTestSimToolkit
 *
 * Information related to SIM Toolkit platform constraints can be found in the
 * @ref platformConstraintsStk "SIM Toolkit platform constraints" page.
 *
 * @section le_sim_access SIM access
 *
 * The SIM card content can be accessed and/or modified by several methods.
 *
 * @subsection le_sim_accessApdu APDU
 *
 * The application can send an APDU (Application Protocol Data Unit) to the SIM using
 * le_sim_SendApdu() API. The user must encode the APDU as specified by in recommendation 3GPP
 * 11.11, 3GPP 51.011, 3GPP 31.102, 3GPP 31.103 or ETSI TS 102 221.
 * @note Between two successive calls to le_sim_SendApdu() API, there is no locking
 * protection. In this situation, some command types and parameters can modify SIM files
 * incorrectly.
 *
 * @subsection le_sim_accessCommand Commands
 *
 * Using le_sim_SendCommand(), the application has easier but more limited access to the
 * SIM database. The command is transmitted to the SIM, which gives information through swi1 and
 * swi2 about the execution of the command (see 3GPP recommendation previously mentioned for
 * their coding).
 * Some parameters are platform dependent, see @subpage platformConstraintsSim "SIM constraints" for
 * their coding.
 *
 * @subsection le_sim_accessLogicalChannel Logical channels
 *
 * Logical channels are specified by the standard ETSI TS 102 221 in the section 8.7. If they are
 * supported by the SIM card, logical channels allow to send independent APDUs on the different
 * channels. In this case:
 * - the basic channel 0 is always available and opened.
 * - upon request, the card assigns a number to open a new channel. This channel remains open until
 *   it is explicitly closed or the SIM card is deactivated.
 *
 * Use le_sim_OpenLogicalChannel() API to open a logical channel on the SIM card. APDUs can then
 * be sent to the SIM card with le_sim_SendApduOnChannel(). When the logical channel is not
 * needed anymore, it can be closed using le_sim_CloseLogicalChannel().
 *
 * @subsection le_sim_accessSampleCode Sample code
 *
 * A sample code can be seen in the following page:
 * - @subpage c_simTestApdu
 *
 * <HR>
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * @file le_sim_interface.h
 *
 * Legato @ref c_sim include file.
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------

/**
 * @page c_simTestProfileSwitch Sample code for Local SIM profile switch
 *
 * @include "apps/test/modemServices/sim/simProfileSwap/simTestComp/simTest.c"
 */

/**
 * @page c_simTestSimToolkit Sample code for Local SIM Toolkit
 *
 * @include "apps/test/modemServices/sim/simToolkit/simToolkitComp/simToolkitTest.c"
 */

/**
 * @page c_simTestAuthentication Sample code for SIM Authentication
 *
 * @snippet "apps/test/modemServices/sim/simIntegrationTest/simTestComp/simTest.c" Define
 * @snippet "apps/test/modemServices/sim/simIntegrationTest/simTestComp/main.c" Print
 * @snippet "apps/test/modemServices/sim/simIntegrationTest/simTestComp/simTest.c" Authentication
 */

/**
 * @page c_simTestIdentification Sample code for SIM Identification

 * @snippet "apps/test/modemServices/sim/simIntegrationTest/simTestComp/main.c" Print
 * @snippet "apps/test/modemServices/sim/simIntegrationTest/simTestComp/simTest.c" Identification
 */

/**
 * @page c_simTestSelect Sample code for SIM Select
 * @snippet "apps/test/modemServices/sim/simIntegrationTest/simTestComp/simTest.c" Select
 */

/**
 * @page c_simTestStates Sample code for SIM States
 *
 * @snippet "apps/test/modemServices/sim/simIntegrationTest/simTestComp/main.c" Print
 * @snippet "apps/test/modemServices/sim/simIntegrationTest/simTestComp/simTest.c" Display
 * @snippet "apps/test/modemServices/sim/simIntegrationTest/simTestComp/simTest.c" State handler
 * @snippet "apps/test/modemServices/sim/simIntegrationTest/simTestComp/simTest.c" State
 */

/**
 * @page c_simTestApdu Sample code for SIM access
 * @snippet "apps/test/modemServices/sim/simIntegrationTest/simTestComp/simTest.c" Apdu
 */

USETYPES le_mdmDefs.api;

//--------------------------------------------------------------------------------------------------
/**
 * Minimum PIN length (4 digits)
 */
//--------------------------------------------------------------------------------------------------
DEFINE  PIN_MIN_LEN     = (4);

//--------------------------------------------------------------------------------------------------
/**
 * Maximum PIN length (8 digits)
 */
//--------------------------------------------------------------------------------------------------
DEFINE  PIN_MAX_LEN     = (8);

//--------------------------------------------------------------------------------------------------
/**
 * Maximum PIN length (8 digits)
 * One extra byte is added for the null character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE  PIN_MAX_BYTES   = (PIN_MAX_LEN+1);

//--------------------------------------------------------------------------------------------------
/**
 * PUK length (8 digits)
 */
//--------------------------------------------------------------------------------------------------
DEFINE  PUK_MAX_LEN     = (8);

//--------------------------------------------------------------------------------------------------
/**
 * PUK length (8 digits)
 * One extra byte is added for the null character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE  PUK_MAX_BYTES   = (PUK_MAX_LEN+1);

//--------------------------------------------------------------------------------------------------
/**
 * ICCID length
 * According to GSM Phase 1
 */
//--------------------------------------------------------------------------------------------------
DEFINE  ICCID_LEN    = (20);

//--------------------------------------------------------------------------------------------------
/**
 * ICCID length
 * One extra byte is added for the null character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE  ICCID_BYTES  = (ICCID_LEN+1);

//--------------------------------------------------------------------------------------------------
/**
 * IMSI length
 */
//--------------------------------------------------------------------------------------------------
DEFINE  IMSI_LEN    = (15);

//--------------------------------------------------------------------------------------------------
/**
 * IMSI length
 * One extra byte is added for the null character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE  IMSI_BYTES  = (IMSI_LEN+1);

//--------------------------------------------------------------------------------------------------
/**
 * APDU length
 */
//--------------------------------------------------------------------------------------------------
DEFINE  APDU_MAX_BYTES  = (255);

//--------------------------------------------------------------------------------------------------
/**
 * SIM response length
 */
//--------------------------------------------------------------------------------------------------
DEFINE  RESPONSE_MAX_BYTES  = (256);

//--------------------------------------------------------------------------------------------------
/**
 * SIM file identifier length
 */
//--------------------------------------------------------------------------------------------------
DEFINE  FILE_ID_LEN  = (4);

//--------------------------------------------------------------------------------------------------
/**
 * SIM file identifier length
 * One extra byte is added for the null character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE  FILE_ID_BYTES  = (FILE_ID_LEN+1);

//--------------------------------------------------------------------------------------------------
/**
 * SIM data command length

 */
//--------------------------------------------------------------------------------------------------
DEFINE  DATA_MAX_BYTES = (100);

//--------------------------------------------------------------------------------------------------
/**
 * SIM file path length
 */
//--------------------------------------------------------------------------------------------------
DEFINE  PATH_MAX_LEN  = (100);

//--------------------------------------------------------------------------------------------------
/**
 * SIM file path length
 * One extra byte is added for the null character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE  PATH_MAX_BYTES  = (PATH_MAX_LEN+1);

//--------------------------------------------------------------------------------------------------
/**
 * eUICC identifier (EID) length
 */
//--------------------------------------------------------------------------------------------------
DEFINE  EID_LEN    = (32);

//--------------------------------------------------------------------------------------------------
/**
 * eUICC identifier (EID) length
 * One extra byte is added for the null character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE  EID_BYTES  = (EID_LEN+1);

//--------------------------------------------------------------------------------------------------
/**
 * Reference type for FPLMN list.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE FPLMNList;


//--------------------------------------------------------------------------------------------------
/**
 * SIM states.
 *
 */
//--------------------------------------------------------------------------------------------------
ENUM States
{
    INSERTED,        ///< SIM card is inserted and locked.
    ABSENT,          ///< SIM card is absent.
    READY,           ///< SIM card is inserted and unlocked.
    BLOCKED,         ///< SIM card is blocked.
    BUSY,            ///< SIM card is busy.
    POWER_DOWN,      ///< SIM card is powered down.
    STATE_UNKNOWN    ///< Unknown SIM state.
};


//--------------------------------------------------------------------------------------------------
/**
 * SIM selection modes
 *
 */
//--------------------------------------------------------------------------------------------------
ENUM SimMode
{
    FORCE_EXTERNAL,      ///< Force to select external SIM
    FORCE_INTERNAL,      ///< Select internal SIM (eSIM) if present.
    FORCE_REMOTE,        ///< Select remote SIM
    PREF_EXTERNAL,       ///< Select external SIM if present, else select internal SIM
    FORCE_INTEGRATED,    ///< Select integrated SIM (iSIM)
    SIMMODE_MAX
};


//--------------------------------------------------------------------------------------------------
/**
 * SIM identifiers.
 *
 */
//--------------------------------------------------------------------------------------------------
ENUM Id
{
    EMBEDDED,           ///< Embedded SIM (eSIM)
    EXTERNAL_SLOT_1,    ///< SIM inserted in external slot 1.
    EXTERNAL_SLOT_2,    ///< SIM inserted in external slot 2.
    REMOTE,             ///< Remote SIM.
    UNSPECIFIED,        ///< le_sim APIs are executed on the currently selected SIM. Use this
                        ///< identifier when automatic SIM selection is enabled.
    INTEGRATED,         ///< Integrated SIM (iSIM)
    ID_MAX
};

//--------------------------------------------------------------------------------------------------
/**
 * Card Manufacturer.
 *
 */
//--------------------------------------------------------------------------------------------------
ENUM Manufacturer
{
    OBERTHUR,           ///< Oberthur.
    GEMALTO,            ///< Gemalto.
    G_AND_D,            ///< G&D.
    MORPHO,             ///< Morpho.
    VALID,              ///< Valid.
    MANUFACTURER_MAX
};

//--------------------------------------------------------------------------------------------------
/**
 * SIM commands.
 */
//--------------------------------------------------------------------------------------------------
ENUM Command
{
    READ_RECORD,    ///< Read a file record.
    READ_BINARY,    ///< Read a transparent elementary file.
    UPDATE_RECORD,  ///< Update a file record.
    UPDATE_BINARY,  ///< Update a transparent elementary file.
    COMMAND_MAX     ///< Max value
};

//--------------------------------------------------------------------------------------------------
/**
 * SIM Toolkit events.
 */
//--------------------------------------------------------------------------------------------------
ENUM StkEvent
{
    OPEN_CHANNEL,    ///< SIM card asks to open a logical channel.
    REFRESH,         ///< SIM card asks for a refresh.
    STK_EVENT_MAX    ///< Unknown SIM Toolkit event.
};

//--------------------------------------------------------------------------------------------------
/**
 * SIM Toolkit Refresh modes, defined in ETSI TS 102 223 sections 6.4.7 and 8.6.
 */
//--------------------------------------------------------------------------------------------------
ENUM StkRefreshMode
{
    REFRESH_INIT_FULL_FCN,              ///< Initialization and Full File Change Notification.
    REFRESH_FCN,                        ///< File Change Notification.
    REFRESH_INIT_FCN,                   ///< Initialization and File Change Notification.
    REFRESH_INIT,                       ///< Initialization.
    REFRESH_RESET,                      ///< SIM reset.
    REFRESH_APP_RESET,                  ///< Application reset.
    REFRESH_SESSION_RESET,              ///< Session reset.
    REFRESH_STEERING_OF_ROAMING,        ///< Steering of Roaming as defined in 3GPP TS 23.122.
    REFRESH_STEERING_OF_ROAMING_IWLAN,  ///< Steering of Roaming for I-WLAN
                                        ///< as defined in 3GPP TS 24.234.
    REFRESH_EUICC_PROFILE_CHANGE,       ///< eUICC Profile State Change.
    REFRESH_MODE_MAX                    ///< Invalid SIM Toolkit Refresh mode.
};

//--------------------------------------------------------------------------------------------------
/**
 * SIM Toolkit Refresh stages.
 */
//--------------------------------------------------------------------------------------------------
ENUM StkRefreshStage
{
    STAGE_WAITING_FOR_OK,   ///< Waiting for OK to refresh.
    STAGE_END_WITH_SUCCESS, ///< Refresh succeeded.
    STAGE_END_WITH_FAILURE, ///< Refresh failed.
    STAGE_MAX               ///< Invalid SIM Toolkit Refresh stage.
};

//--------------------------------------------------------------------------------------------------
/**
 * Handler for sim state changes.
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER NewStateHandler
(
    Id       simId IN,             ///< The SIM identifier.
    States   simState IN           ///< The SIM state.
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on sim state changes.
 *
 */
//--------------------------------------------------------------------------------------------------
EVENT NewState
(
    NewStateHandler handler
);

//--------------------------------------------------------------------------------------------------
/**
 * Handler for profile update events.
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER ProfileUpdateHandler
(
    Id       simId IN,             ///< The SIM identifier.
    StkEvent stkEvent IN           ///< The SIM state.
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on profile update
 *
 */
//--------------------------------------------------------------------------------------------------
EVENT ProfileUpdate
(
    ProfileUpdateHandler handler
);

//--------------------------------------------------------------------------------------------------
/**
 * Handler for Sim Toolkit Events.
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER SimToolkitEventHandler
(
    Id       simId IN,             ///< The SIM identifier.
    StkEvent stkEvent IN           ///< The SIM state.
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on Sim Toolkit application.
 *
 */
//--------------------------------------------------------------------------------------------------
EVENT SimToolkitEvent
(
    SimToolkitEventHandler handler
);

//--------------------------------------------------------------------------------------------------
/**
 * Handler for ICCID change events.
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER IccidChangeHandler
(
    Id       simId IN,               ///< The SIM identifier.
    string   iccid[ICCID_LEN] IN     ///< ICCID
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on ICCID
 *
 */
//--------------------------------------------------------------------------------------------------
EVENT IccidChange
(
    IccidChangeHandler handler
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the current selected sim Mode.
 *
 * @return Sim selection Mode
 */
//--------------------------------------------------------------------------------------------------
FUNCTION SimMode GetSimMode
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the current selected card.
 *
 * @return Number of the current selected SIM card.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Id GetSelectedCard
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Select a SIM.
 *
 * @return LE_FAULT         Function failed to select the requested SIM
 * @return LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SelectCard
(
    Id    simId IN             ///< The SIM identifier.
);


//--------------------------------------------------------------------------------------------------
/**
 * Retrieves the integrated circuit card identifier (ICCID) of the SIM card (20 digits)
 *
 * @return LE_OK             ICCID was successfully retrieved.
 * @return LE_OVERFLOW       iccidPtr buffer was too small for the ICCID.
 * @return LE_BAD_PARAMETER  Invalid parameters.
 * @return LE_FAULT          The ICCID could not be retrieved.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetICCID
(
    Id      simId IN,               ///< The SIM identifier.
    string  iccid[ICCID_LEN] OUT    ///< ICCID
);

//--------------------------------------------------------------------------------------------------
/**
 * Retrieves the identifier for the embedded Universal Integrated Circuit Card identifier (EID)
 * (32 digits)
 *
 * @return LE_OK             EID was successfully retrieved.
 * @return LE_OVERFLOW       eidPtr buffer was too small for the EID.
 * @return LE_BAD_PARAMETER  Invalid parameters.
 * @return LE_FAULT          The EID could not be retrieved.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 *
 * @warning le_sim_GetEID() function is platform dependent. Please refer to the
 *          @ref platformConstraintsSim_EID section for full details.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetEID
(
    Id      simId IN,               ///< The SIM identifier.
    string  eid[EID_LEN] OUT        ///< EID
);

//--------------------------------------------------------------------------------------------------
/**
 * Retrieves the identification number (IMSI) of the SIM card. (max 15 digits)
 *
 * @return LE_OVERFLOW      The imsiPtr buffer was too small for the IMSI.
 * @return LE_BAD_PARAMETER The parameters are invalid.
 * @return LE_FAULT         The function failed.
 * @return LE_TIMEOUT       No response was received.
 * @return LE_OK            The function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetIMSI
(
    Id      simId IN,            ///< The SIM identifier.
    string  imsi[IMSI_LEN] OUT   ///< IMSI
);

//--------------------------------------------------------------------------------------------------
/**
 * Verify if the SIM card is present or not.
 *
 * @return true   SIM card is present.
 * @return false  SIM card is absent
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsPresent
(
    Id      simId IN            ///< The SIM identifier.
);

//--------------------------------------------------------------------------------------------------
/**
 * Verify if the SIM is ready (PIN code correctly inserted or not
 * required).
 *
 * @return true   PIN is correctly inserted or not required.
 * @return false  PIN must be inserted
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsReady
(
    Id      simId IN            ///< The SIM identifier.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to enter the PIN code.
 *
 * @return LE_BAD_PARAMETER The parameters are invalid.
 * @return LE_NOT_FOUND     The function failed to select the SIM card for this operation.
 * @return LE_UNDERFLOW     The PIN code is not long enough (min 4 digits).
 * @return LE_FAULT         The function failed to enter the PIN code.
 * @return LE_OK            The function succeeded.
 *
 * @note If PIN code is too long (max 8 digits), it is a fatal error, the
 *       function will not return.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t EnterPIN
(
    Id      simId IN,           ///< The SIM identifier.
    string  pin[PIN_MAX_LEN] IN ///< The PIN code.
);

//--------------------------------------------------------------------------------------------------
/**
 * Change the PIN code.
 *
 * @return LE_NOT_FOUND     Function failed to select the SIM card for this operation.
 * @return LE_UNDERFLOW     PIN code is/are not long enough (min 4 digits).
 * @return LE_FAULT         Function failed to change the PIN code.
 * @return LE_OK            Function succeeded.
 *
 * @note If PIN code is too long (max 8 digits), it is a fatal error, the
 *       function will not return.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t ChangePIN
(
    Id      simId IN,               ///< The SIM identifier.
    string  oldpin[PIN_MAX_LEN] IN, ///< The old PIN code.
    string  newpin[PIN_MAX_LEN] IN  ///< The new PIN code.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the number of remaining PIN insertion tries.
 *
 * @return LE_NOT_FOUND     The function failed to select the SIM card for this operation.
 * @return LE_BAD_PARAMETER Invalid SIM identifier.
 * @return LE_FAULT         The function failed to get the number of remaining PIN insertion tries.
 * @return A positive value The function succeeded. The number of remaining PIN insertion tries.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION int32 GetRemainingPINTries
(
    Id      simId IN           ///< The SIM identifier.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the number of remaining PUK insertion tries.
 *
 * @return LE_OK            On success.
 * @return LE_NOT_FOUND     The function failed to select the SIM card for this operation.
 * @return LE_BAD_PARAMETER Invalid SIM identifier.
 * @return LE_FAULT         The function failed to get the number of remaining PUK insertion tries.
 *
 * @note If the caller is passing an null pointer to this function, it is a fatal error
 *       and the function will not return.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetRemainingPUKTries
(
    Id      simId                 IN,     ///< The SIM identifier.
    uint32  remainingPukTriesPtr  OUT     ///< The number of remaining PUK insertion tries.
);

//--------------------------------------------------------------------------------------------------
/**
 * Unlock the SIM card: it disables the request of the PIN code.
 *
 * @return LE_NOT_FOUND     Function failed to select the SIM card for this operation.
 * @return LE_UNDERFLOW     PIN code is not long enough (min 4 digits).
 * @return LE_FAULT         The function failed to unlock the SIM card.
 * @return LE_OK            Function succeeded.
 *
 * @note If PIN code is too long (max 8 digits), it is a fatal error, the
 *       function will not return.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Unlock
(
    Id      simId IN,           ///< The SIM identifier.
    string  pin[PIN_MAX_LEN] IN ///< The PIN code.
);

//--------------------------------------------------------------------------------------------------
/**
 * Lock the SIM card: it enables the request of the PIN code.
 *
 * @return LE_NOT_FOUND     Function failed to select the SIM card for this operation.
 * @return LE_UNDERFLOW     PIN code is not long enough (min 4 digits).
 * @return LE_FAULT         The function failed to unlock the SIM card.
 * @return LE_OK            Function succeeded.
 *
 * @note If PIN code is too long (max 8 digits), it is a fatal error, the
 *       function will not return.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Lock
(
    Id      simId IN,           ///< The SIM identifier.
    string  pin[PIN_MAX_LEN] IN ///< The PIN code.
);

//--------------------------------------------------------------------------------------------------
/**
 * Unblock the SIM card.
 *
 * @return LE_NOT_FOUND     Function failed to select the SIM card for this operation.
 * @return LE_UNDERFLOW     PIN code is not long enough (min 4 digits).
 * @return LE_BAD_PARAMETER Invalid SIM identifier.
 * @return LE_OUT_OF_RANGE  PUK code length is not correct (8 digits).
 * @return LE_FAULT         The function failed to unlock the SIM card.
 * @return LE_OK            Function succeeded.
 *
 * @note If new PIN or puk code are too long (max 8 digits), it is a fatal error, the
 *       function will not return.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Unblock
(
    Id      simId IN,               ///< The SIM identifier.
    string  puk[PUK_MAX_LEN] IN,    ///< The PUK code.
    string  newpin[PIN_MAX_LEN] IN  ///< The PIN code.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the SIM state.
 *
 * @return Current SIM state.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION States GetState
(
    Id      simId IN             ///< The SIM identifier.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the SIM Phone Number.
 *
 * @return
 *      - LE_OK on success
 *      - LE_OVERFLOW if the Phone Number can't fit in phoneNumberStr
 *      - LE_BAD_PARAMETER if a parameter is invalid
 *      - LE_FAULT on any other failure
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSubscriberPhoneNumber
(
    Id      simId IN,                                        ///< The SIM identifier.
    string  phoneNumberStr[le_mdmDefs.PHONE_NUM_MAX_LEN] OUT ///< The phone Number.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Home Network Name information.
 *
 * @return
 *      - LE_OK on success
 *      - LE_OVERFLOW if the Home Network Name can't fit in nameStr
 *      - LE_BAD_PARAMETER if a parameter is invalid
 *      - LE_FAULT on any other failure
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 *
 * @note The home network name can be given even if the device is not registered on the network.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetHomeNetworkOperator
(
    Id     simId IN,            ///< The SIM identifier.
    string nameStr[100] OUT     ///< the home network Name
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Home Network MCC MNC.
 *
 * @return
 *      - LE_OK on success
 *      - LE_NOT_FOUND if Home Network has not been provisioned
 *      - LE_FAULT for unexpected error
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetHomeNetworkMccMnc
(
    Id     simId IN,            ///< The SIM identifier.
    string mccPtr[3] OUT,       ///< Mobile Country Code
    string mncPtr[3] OUT        ///< Mobile Network Code
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to request the multi-profile eUICC to swap to ECS and to refresh.
 * The User's application must wait for eUICC reboot to be finished and network connection
 * available.
 *
 * @return
 *      - LE_OK on success
 *      - LE_BAD_PARAMETER invalid SIM identifier
 *      - LE_BUSY when a profile swap is already in progress
 *      - LE_FAULT for unexpected error
 *      - LE_DUPLICATE for duplicate operation
 *
 * @note Please ensure that the eUICC is selected using le_sim_SelectCard() and in a ready state
 *       before attempting a profile swap.
 *
 * @warning If you use a Morpho or Oberthur card, the SIM_REFRESH PRO-ACTIVE command must be
 *          accepted with le_sim_AcceptSimToolkitCommand() in order to complete the profile swap
 *          procedure.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t LocalSwapToEmergencyCallSubscription
(
    Id           simId IN,                ///< The SIM identifier.
    Manufacturer manufacturer IN          ///< The card manufacturer.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to request the multi-profile eUICC to swap back to commercial
 * subscription and to refresh.
 * The User's application must wait for eUICC reboot to be finished and network connection
 * available.
 *
 * @return
 *      - LE_OK on success
 *      - LE_BAD_PARAMETER invalid SIM identifier
 *      - LE_BUSY when a profile swap is already in progress
 *      - LE_FAULT for unexpected error
 *      - LE_DUPLICATE for duplicate operation
 *
 * @note Please ensure that the eUICC is selected using le_sim_SelectCard() and in a ready state
 *       before attempting a profile swap.
 *
 * @warning If you use a Morpho or Oberthur card, the SIM_REFRESH PRO-ACTIVE command must be
 *          accepted with le_sim_AcceptSimToolkitCommand() in order to complete the profile swap
 *          procedure.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t LocalSwapToCommercialSubscription
(
    Id           simId IN,                ///< The SIM identifier.
    Manufacturer manufacturer IN          ///< The card manufacturer.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the current subscription.
 *
 * @return
 *      - LE_OK on success
 *      - LE_BAD_PARAMETER invalid SIM identifier or null ECS pointer is passed
 *      - LE_NOT_FOUND cannot determine the current selected subscription
 *      - LE_FAULT for unexpected errors
 *
 * @warning There is no standard method to interrogate the current selected subscription. The
 * returned value of this function is based on the last executed local swap command. This means
 * that this function will always return LE_NOT_FOUND error at Legato startup.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t IsEmergencyCallSubscriptionSelected
(
    Id    simId IN,  ///< The SIM identifier
    bool  isEcs OUT  ///< true if Emergency Call Subscription (ECS) is selected,
                     ///<       false if Commercial Subscription is selected
);

//--------------------------------------------------------------------------------------------------
/**
 * Accept the last SIM Toolkit command.
 *
 * @return
 *  - LE_OK       The function succeeded.
 *  - LE_FAULT    The function failed.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t AcceptSimToolkitCommand
(
    Id  simId IN    ///< The SIM identifier.
);

//--------------------------------------------------------------------------------------------------
/**
 * Reject the last SIM Toolkit command.
 *
 * @return
 *  - LE_OK       The function succeeded.
 *  - LE_FAULT    The function failed.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t RejectSimToolkitCommand
(
    Id  simId IN    ///< The SIM identifier.
);

//--------------------------------------------------------------------------------------------------
/**
 * Retrieve the mode of the last SIM Toolkit Refresh command.
 * The modes are defined in ETSI TS 102 223 sections 6.4.7 and 8.6.
 *
 * @return
 *  - LE_OK             The function succeeded.
 *  - LE_BAD_PARAMETER  A parameter is invalid.
 *  - LE_UNAVAILABLE    The last SIM Toolkit command is not a Refresh command.
 *  - LE_FAULT          The function failed.
 *  - LE_UNSUPPORTED    The platform does not support this operation.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSimToolkitRefreshMode
(
    Id              simId       IN,     ///< The SIM identifier.
    StkRefreshMode  refreshMode OUT     ///< The Refresh mode.
);

//--------------------------------------------------------------------------------------------------
/**
 * Retrieve the stage of the last SIM Toolkit Refresh command.
 *
 * @return
 *  - LE_OK             The function succeeded.
 *  - LE_BAD_PARAMETER  A parameter is invalid.
 *  - LE_UNAVAILABLE    The last SIM Toolkit command is not a Refresh command.
 *  - LE_FAULT          The function failed.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSimToolkitRefreshStage
(
    Id              simId           IN,     ///< The SIM identifier.
    StkRefreshStage refreshStage    OUT     ///< The Refresh stage.
);

//--------------------------------------------------------------------------------------------------
/**
 * Send APDU command to the SIM.
 *
 * @return
 *      - LE_OK             Function succeeded.
 *      - LE_FAULT          The function failed.
 *      - LE_BAD_PARAMETER  A parameter is invalid.
 *      - LE_NOT_FOUND      The function failed to select the SIM card for this operation.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SendApdu
(
    Id           simId IN,                            ///< The SIM identifier.
    uint8        commandApdu[APDU_MAX_BYTES] IN,      ///< APDU command.
    uint8        responseApdu[RESPONSE_MAX_BYTES] OUT ///< SIM response.
);

//--------------------------------------------------------------------------------------------------
/**
 * Send a command to the SIM.
 *
 * @return
 *      - LE_OK             Function succeeded.
 *      - LE_FAULT          The function failed.
 *      - LE_BAD_PARAMETER  A parameter is invalid.
 *      - LE_NOT_FOUND      - The function failed to select the SIM card for this operation
 *                          - The requested SIM file is not found
 *      - LE_OVERFLOW       Response buffer is too small to copy the SIM answer.
 *      - LE_UNSUPPORTED    The platform does not support this operation.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SendCommand
(
    Id             simId IN,                                ///< The SIM identifier.
    Command        command IN,                              ///< The SIM command.
    string         fileIdentifier[FILE_ID_LEN] IN,          ///< File identifier
    uint8          p1 IN,                                   ///< Parameter P1 passed to the SIM
    uint8          p2 IN,                                   ///< Parameter P2 passed to the SIM
    uint8          p3 IN,                                   ///< Parameter P3 passed to the SIM
    uint8          data[DATA_MAX_BYTES] IN,                   ///< data command.
    string         path[PATH_MAX_LEN] IN,                   ///< path of the elementary file
    uint8          sw1 OUT,                                 ///< Status Word 1 received from the SIM
    uint8          sw2 OUT,                                 ///< Status Word 2 received from the SIM
    uint8          response[RESPONSE_MAX_BYTES] OUT           ///< SIM response.
);

//--------------------------------------------------------------------------------------------------
/**
 * Enable or disable the automatic SIM selection
 *
 * @note Automatic SIM selection uses the following rule: If an external SIM is inserted in
 *       slot 1 then select it. Otherwise, fall back to the internal SIM card.
 *
 * @return
 *      - LE_OK            Function succeeded.
 *      - LE_FAULT         Function failed to execute.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetAutomaticSelection
(
    bool    enable IN             ///< True if the feature needs to be enabled. False otherwise.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the automatic SIM selection
 *
 * @note When enabled, automatic SIM selection uses the following rule: If an external SIM is
 *       inserted in slot 1 then select it. Otherwise, fall back to the internal SIM card.
 *
 * @return
 *      - LE_OK             Function succeeded.
 *      - LE_FAULT          Function failed to execute.
 *      - LE_BAD_PARAMETER  Invalid parameter.
 *      - LE_UNSUPPORTED    The platform does not support this operation.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetAutomaticSelection
(
    bool    enable OUT            ///< True if the feature is enabled. False otherwise.
);

//--------------------------------------------------------------------------------------------------
/**
 * Reset the SIM.
 *
 * @return
 *      - LE_FAULT         Function failed.
 *      - LE_OK            Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Reset
(
    Id simId IN                          ///< The SIM identifier.
);

//--------------------------------------------------------------------------------------------------
/**
 * Create empty FPLMN list to insert FPLMN operators.
 *
 * @return
 *      - Reference to the List object.
 *      - Null pointer if not able to create list reference.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION FPLMNList CreateFPLMNList
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Add FPLMN network into the newly created FPLMN list.
 * If the FPLMNListRef, mcc or mnc is not valid then this function will kill the calling client.
 *
 * @return
 *      - LE_FAULT         Function failed.
 *      - LE_OK            Function succeeded.
 *      - LE_OVERFLOW      If FPLMN operator can not be inserted into FPLMN list.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t AddFPLMNOperator
(
    FPLMNList FPLMNListRef IN,              ///< FPLMN list reference.
    string    mcc[3] IN,                    ///< Mobile Country Code.
    string    mnc[3] IN                     ///< Mobile Network Code.
);

//--------------------------------------------------------------------------------------------------
/**
 * Write FPLMN list into the SIM.
 * If the FPLMNListRef is not valid then this function will kill the calling client.
 *
 * @return
 *      - LE_FAULT         Function failed.
 *      - LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t WriteFPLMNList
(
    Id        simId IN,                     ///< The SIM identifier.
    FPLMNList FPLMNListRef IN               ///< FPLMN list reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * Read FPLMN list from the SIM.
 *
 * @return
 *      - Reference to the List object.
 *      - Null pointer if FPLMN list is not able to read from the SIM.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION FPLMNList ReadFPLMNList
(
    Id       simId IN                       ///< The SIM identifier.
);

//--------------------------------------------------------------------------------------------------
/**
 * Read the first FPLMN network from the list of FPLMN objects retrieved with
 * le_sim_ReadFPLMNList().
 * If the FPLMNListRef, mccPtr or mncPtr is not valid then this function will kill the calling
 * client.
 *
 * @return
 *      - LE_FAULT         Function failed.
 *      - LE_OK            Function succeeded.
 *      - LE_OVERFLOW      MCC/MNC string size is greater than string length parameter which has
 *                         been given into this function.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetFirstFPLMNOperator
(
    FPLMNList FPLMNListRef IN,               ///< FPLMN list reference.
    string mccPtr[3] OUT,                    ///< Mobile Country Code.
    string mncPtr[3] OUT                     ///< Mobile Network Code.
);

//--------------------------------------------------------------------------------------------------
/**
 * Read the next FPLMN network from the list of FPLMN objects retrieved with le_sim_ReadFPLMNList().
 * If the FPLMNListRef, mccPtr or mncPtr is not valid then this function will kill the calling
 * client.
 *
 * @return
 *      - LE_FAULT         Function failed.
 *      - LE_OK            Function succeeded.
 *      - LE_OVERFLOW      MCC/MNC string size is greater than string length parameter which has
 *                         been given into this function.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetNextFPLMNOperator
(
    FPLMNList FPLMNListRef IN,               ///< FPLMN list reference.
    string mccPtr[3] OUT,                    ///< Mobile Country Code.
    string mncPtr[3] OUT                     ///< Mobile Network Code.
);

//--------------------------------------------------------------------------------------------------
/**
 * Delete the FPLMN list created by le_sim_ReadFPLMNList() or le_sim_CreateFPLMNList().
 * If the FPLMNListRef is not valid then this function will kill the calling client.
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION DeleteFPLMNList
(
    FPLMNList FPLMNListRef IN               ///< FPLMN list reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * Open a logical channel on the SIM card.
 *
 * @return
 *      - LE_OK            Function succeeded.
 *      - LE_BAD_PARAMETER Invalid parameter.
 *      - LE_FAULT         Function failed.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t OpenLogicalChannel
(
     uint8 channelPtr OUT ///< The number of the opened logical channel.
);

//--------------------------------------------------------------------------------------------------
/**
 * Close a logical channel on the SIM card.
 *
 * @return
 *      - LE_OK            Function succeeded.
 *      - LE_FAULT         Function failed.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t CloseLogicalChannel
(
    uint8 channel IN ///< The number of the logical channel to close.
);


//--------------------------------------------------------------------------------------------------
/**
 * Send APDU command on a dedicated logical channel.
 *
 * @return
 *      - LE_OK             Function succeeded.
 *      - LE_BAD_PARAMETER  A parameter is invalid.
 *      - LE_NOT_FOUND      The function failed to select the SIM card for this operation.
 *      - LE_FAULT          The function failed.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SendApduOnChannel
(
    Id           simId IN,                            ///< The SIM identifier.
    uint8        channel IN,                          ///< The logical channel number.
    uint8        commandApdu[APDU_MAX_BYTES] IN,      ///< APDU command.
    uint8        responseApdu[RESPONSE_MAX_BYTES] OUT ///< SIM response.
);

//--------------------------------------------------------------------------------------------------
/**
 * Power up or down the current SIM.
 *
 * @return LE_OK        Function succeeded.
 * @return LE_FAULT     Function failed.
 *
 * @note For SIM power cycle operation, it must wait until SIM state is LE_SIM_POWER_DOWN
 *       before powering on the SIM, otherwise power up SIM will fail.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetPower
(
    Id           simId IN,                  ///< The SIM identifier.
    le_onoff_t   power IN                   ///< The power state.
);

//--------------------------------------------------------------------------------------------------
/**
 * Enable or disable SIM detection
 *
 * @return
 *      - LE_OK             Function succeeded.
 *      - LE_FAULT          Function failed.
 *      - LE_UNSUPPORTED    SIM detection is not supported on this device.
 *
 * @note SIM detection is hardware-specific.
 *       Please check the return value to make sure this is functional.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetDetection
(
    bool    enable IN             ///< True if the feature needs to be enabled. False otherwise.
);

//--------------------------------------------------------------------------------------------------
/**
 * Examine if the hardware-specific SIM detection is supported.
 *
 * @return
 *      - LE_OK        Function succeeded.
 *      - LE_FAULT     Function failed.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t IsSimDetSupported
(
    bool supported OUT            ///< True if SIM detection is supported. False otherwise.
);
