#!/bin/sh

################################################################################
#                                                                              #
# cm is a shell script that wraps the cm binary in order to start a data       #
# session based on cellular modem technology. It sets up the last registered   #
# profile preferences, the ip routing table and tests the connection (just a   #
# ping test to see if we can reach the outside world).                         #
#                                                                              #
# For more information type 'cm help'.                                         #
#                                                                              #
# Copyright (C) Sierra Wireless Inc.                                           #
#                                                                              #
################################################################################

CM=${CM:="/legato/systems/current/apps/tools/read-only/bin/cm"}
IP=${IP:="/sbin/ip"}
IFCONFIG=${IFCONFIG:="/sbin/ifconfig"}
CURL=${CURL:-"/usr/bin/curl"}
RESOLV_CONF=${RESOLV_CONF="/etc/resolv.conf"}
LOG=${LOG:="/var/log/cm"}
TEST_SITE=${TEST_SITE:="https://www.akamai.com"}
RUN_TIME=${RUN_TIME:="/var/run/cm"}
DEFAULT_ROUTE=${DEFAULT_ROUTE:="$RUN_TIME/default.bck"}
DEFAULT_RESOLV_CONF=${DEFAULT_RESOLV_CONF:="$RUN_TIME/resolv.conf.bck"}

cm() {
    $CM "$@"
}

ip() {
    $IP $@
}

ifconfig() {
    $IFCONFIG $@
}

curl() {
    $CURL $@
}

handle_err() {
    local err=$1
    local log=$LOG

    if [ -f "$log" ]; then
        sed -i "1s/^/$(date) - /" $log
    fi

    if [ $err -ne 0 ]; then
        echo "failed"
        cat $log
        exit 1
    else
        echo "ok"
    fi
}

delete_default_route() {
    local family=$1
    local bkp=${2:-true}
    local default_route=$(ip -family $family route show default)
    if [ -n "${default_route// }" ]; then
        if [ "x$bkp" = "xtrue" ]; then
            echo "$default_route $family" >> "$DEFAULT_ROUTE"
        fi
        ip -family $family route del default
    fi
}

update_route() {
    if [ "x$1" = "xconnect" ]; then
        local family=$2
        local iface=$3
        local gw=$4

        # Backup existing route
        delete_default_route $family

        if [ -z "$gw" ] || [ "x$gw" = "xN/A" ]; then
            return
        fi

        echo -n "Routing $family ... "
        ip -family $family route add default via $gw dev $iface > $LOG 2>&1
        handle_err $?
   elif [ "x$1" = "xdisconnect" ]; then

        # Restore previous routes
        if [ -f "$DEFAULT_ROUTE" ]; then
            for family in inet inet6; do
                local gw=$(grep $family $DEFAULT_ROUTE | cut -d' ' -f3)
                local iface=$(grep $family $DEFAULT_ROUTE | cut -d' ' -f5)
                delete_default_route $family false
                if [ -n "$gw" ]; then
                    echo -n "Routing $family ... "
                    ip -family $family route add default via $gw dev $iface > $LOG 2>&1
                    handle_err $?
                fi
            done
        fi
    fi
}

update_dns() {
    if [ "x$1" = "xconnect" ]; then
        if [ "x$2" != "xN/A" ]; then
            if [ -f "$RESOLV_CONF" ]; then
                cp "$RESOLV_CONF" "$DEFAULT_RESOLV_CONF"
                echo "" > "$RESOLV_CONF"
            fi
        fi
    elif [ "x$1" = "xdisconnect" ]; then
        if [ -f "$DEFAULT_RESOLV_CONF" ]; then
            cat "$DEFAULT_RESOLV_CONF" > "$RESOLV_CONF"
            rm "$DEFAULT_RESOLV_CONF"
        fi
    fi
    shift 1

    for i in $@; do
        if [ "x$1" != "xN/A" ]; then
            grep $1 $RESOLV_CONF > /dev/null 2>&1
            if [ $? -ne 0 ]; then
                echo -n "Updating /etc/resolv.conf ... "
                echo "nameserver $1" >> $RESOLV_CONF
                echo "ok"
            fi
            shift 1
        fi
    done
}

cm_data_get_param() {
    local info=$1
    local param=$2

    echo "$info" | sed "s/^$param:[ \t]*//;t;d"
}

cm_data_connect () {
    local opt=$1
    local info=$(cm data info)
    local index=$(cm_data_get_param "$info" "Index")
    local apn=$(cm_data_get_param "$info" "APN")
    local status=$(cm_data_get_param "$info" "Connected")

    if [ "$opt" = "-1" ]; then
        echo -n "Disconnecting ... "
        cm data connect $opt > $LOG 2>&1
        handle_err $?
        update_route disconnect
        update_dns disconnect
        exit 0
    fi

    if [ "$status" = "no" ]; then
        echo "Setting up profile $index"

        if [ -z "$apn" ]; then
            echo -n "No APN selected."
        fi

        echo -n "Connecting ... "
        cm data connect $opt > $LOG 2>&1
        handle_err $?
    fi

    info=$(cm data info)

    local iface=$(cm_data_get_param "$info" "Interface")

    if [ -z "$iface" ]; then
        echo "No interface, cannot proceed."
        exit 1
    fi

    echo -n "Checking if device '$iface' is up ... "
    ifconfig | grep "$iface" > /dev/null 2>&1
    handle_err $?

    local family

    # Remove route backup file
    rm -f $DEFAULT_ROUTE

    local dns_list=""
    for ipversion in IPv4 IPv6; do
        family=$(cm_data_get_param "$info" "Family\[${ipversion}\]")

        if [ -z "$family" ]; then
            continue
        fi

        local gw=$(cm_data_get_param "$info" "Gateway\[${ipversion}\]")

        if [ -z "$gw" ]; then
            echo "No gateway."
        fi

        local dns1=$(cm_data_get_param "$info" "Dns1\[${ipversion}\]")
        local dns2=$(cm_data_get_param "$info" "Dns2\[${ipversion}\]")

        if [ -z "$dns1" ]; then
            echo "No ${ipversion} dns1."
        fi
        dns_list="${dns_list} $dns1"

        if [ -z "$dns2" ]; then
            echo "No ${ipversion} dns2."
        fi
        dns_list="${dns_list} $dns2"

        update_route connect $family $iface $gw
    done
    update_dns connect ${dns_list}

    echo "Testing connection ... "
    curl --silent $TEST_SITE > $LOG 2>&1
    handle_err $?

    exit 0
}

if [ "$1" = "data" ]; then
    if [ "$2" = "connect" ] && [ $# -le 3 ]; then
        mkdir -p $RUN_TIME
        shift 2
        cm_data_connect $@
    elif [ "$2" = "disconnect" ] && [ $# -le 2 ]; then
        mkdir -p $RUN_TIME
        cm_data_connect -1
    fi
fi

cm "$@"
