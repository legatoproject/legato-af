#!/bin/bash
# --------------------------------------------------------------------------------------------------
# Ninja build script generator for the liblegato build.
#
# Copyright (C) Sierra Wireless Inc.
# --------------------------------------------------------------------------------------------------

# Ensure all the required variables are set.
if [ -z "$LEGATO_ROOT" ]
then
    echo "**ERROR: LEGATO_ROOT is not set." 1>&2
    exit 1
fi

if [ -z "$LEGATO_TARGET" ]
then
    echo "**ERROR: LEGATO_TARGET is not set." 1>&2
    exit 1
fi

if [ -z "$CC" ]
then
    echo "**ERROR: CC is not set." 1>&2
    exit 1
fi

if [ -z "$BUILD_DIR" ]
then
    echo "**ERROR: BUILD_DIR is not set." 1>&2
    exit 1
fi

if [ -z "$STATIC_LIB_DIR" ]
then
    echo "**ERROR: STATIC_LIB_DIR is not set." 1>&2
    exit 1
fi

DEBUG_DIR=$BUILD_DIR/../debug

NINJA_SCRIPT=$BUILD_DIR/build.ninja
NINJA_SCRIPT_GENERATOR=$0

BIN_DIR=$BUILD_DIR/bin
LIB_DIR=$BUILD_DIR/lib
SRC_DIR=$LEGATO_ROOT/framework/liblegato

legato_target_caps=${LEGATO_TARGET^^}
legato_target_caps=${legato_target_caps/-/_}

declare -A LIBLEGATO_FILES

# Turn a source file path into a path to the object (.o) file that it will be compiled into.
function ObjectFromSource()
{
    local module="${1}"
    local source="${2}"
    local prefix_dir="$(basename $(dirname $source))/"

    if [ "${prefix_dir}" = "/" ]; then
        prefix_dir=
    fi
    printf "%s" "${BUILD_DIR}/obj/${module}/${prefix_dir}$(basename $source).o"
}

# Insert input source and output object into associative array
function AddSources()
{
    local module="${1}"
    shift

    for source in "$@"; do
        LIBLEGATO_FILES["${source}"]=$(ObjectFromSource $module "${source}")
    done
}

# List all of the object files
function ListObjects()
{
    for source in "${!LIBLEGATO_FILES[@]}"; do
        printf " %s" "${LIBLEGATO_FILES[$source]}"
    done
}

# On failure, clean out ninja build script
trap "rm -f $NINJA_SCRIPT" EXIT

# Clean out previous ninja script, put in header
cat > $NINJA_SCRIPT <<EOF
# Build script for the Legato application framework's C runtime library (liblegato).

# == Auto-generated file.  DO NOT EDIT. ==
# == Generated by $0 ==

EOF

AddSources liblegato $(ls $SRC_DIR/*.c)

base_cflags_name="${legato_target_caps}_CFLAGS"

CFLAGS="${!base_cflags_name}"

used_ninja_configs=
modules=

for module_path in $(find -L $SRC_DIR/* -type d -prune); do
    ninja_config=${module_path}/ninja-config
    module_name=${module_path#$SRC_DIR/}
    config_name=LE_CONFIG_${module_name^^}
    if [ "${!config_name}" = y ]; then
        if [[ -f $ninja_config ]]; then
            source $ninja_config
            used_ninja_configs="$used_ninja_configs $ninja_config"
        fi
        modules="$modules ${module_path}"
        AddSources $module_name $(ls ${module_path}/*.c)
        CFLAGS="${CFLAGS} -I${module_path}"
    fi
done

# Handle custom framework adaptor
if [ "${LE_CONFIG_CUSTOM_FA}" = y ]; then
    module_path="${LEGATO_ROOT}/${LE_CONFIG_CUSTOM_FA_PATH}/liblegato"
    ninja_config="${module_path}/ninja-config"
    if [[ -f "${ninja_config}" ]]; then
        source "${ninja_config}"
        used_ninja_configs="$used_ninja_configs $ninja_config"
    fi
    modules="$modules ${module_path}"
    AddSources fa $(ls ${module_path}/*.c)
    CFLAGS="${CFLAGS} -I${LEGATO_ROOT}/${LE_CONFIG_CUSTOM_FA_PATH}/include"
fi

# Include auto-generated header directory.
CFLAGS="${CFLAGS} -I${LEGATO_ROOT}/build/${TARGET}/framework/include"

case "${CC}" in
    *armcc*)
        # ARM method of specifying dependencies
        depends_flags="--depend=\$out.d --depend-format=unix_escaped"
        ;;
    *)
        # GCC and clang method of specifying dependencies
        depends_flags="-MMD -MF \$out.d"
        ;;
esac


LIBLEGATO_SHARED_NAME=$LIB_DIR/liblegato.so
LIBLEGATO_STATIC_NAME=$STATIC_LIB_DIR/liblegato.a

cat >> $NINJA_SCRIPT <<EOF
builddir = $BUILD_DIR

rule Compile
  description = Compiling liblegato source file
  depfile = \$out.d
  command = $CCACHE $CC $depends_flags -c \$in -o \$out \$flags \$
            -DLE_COMPONENT_NAME=framework \$
            -DLE_FILENAME=\`basename \$in\` \$`
if [[ -n "${LE_CONFIG_FILETAG}" && "$LE_CONFIG_FILETAG" != "0" ]]; then
cat <<FILETAGFLAG

            -D__FILETAG__=\\"\\\`basename \\\$in | rev | cut -c-$LE_CONFIG_FILETAG | rev\\\`\\" \$

FILETAGFLAG
fi`
            -I$LEGATO_ROOT/framework/include \$
            -I$LEGATO_ROOT/framework/liblegato

EOF

if [ "${LE_CONFIG_STRIP_STAGING_TREE}" = y ]; then

    cat >>$NINJA_SCRIPT <<EOF
rule DynamicLink
  description = Dynamic linking liblegato
  command = $CC -shared -Wl,--build-id -o \$out \$in -lpthread -lrt -ldl $NINJA_LDFLAGS \$
            && $LEGATO_ROOT/framework/tools/scripts/splitdebug -d $DEBUG_DIR \$out

EOF
else
    cat >>$NINJA_SCRIPT <<EOF
rule DynamicLink
  description = Dynamic linking liblegato
  command = $CC -shared -Wl,--build-id -o \$out \$in -lpthread -lrt -ldl $NINJA_LDFLAGS

EOF
fi

cat >>$NINJA_SCRIPT <<EOF
rule StaticLink
  description = Static linking liblegato
  command = $AR rcs \$out \$in

rule RegenNinjaScript
  description = Regenerating framework build script
  generator = 1
  command = export LEGATO_TARGET=$LEGATO_TARGET && \$
            export LEGATO_ROOT="$LEGATO_ROOT" && \$
            $NINJA_SCRIPT_GENERATOR

EOF

if [[ "$LIBLEGATO_SHARED" = y ]]; then
    echo "build ${LIBLEGATO_SHARED_NAME} : DynamicLink$(ListObjects)"
    echo
fi >> $NINJA_SCRIPT

# Always build static liblegato -- the start daemon needs it even on Linux
cat >> $NINJA_SCRIPT <<EOF
build ${LIBLEGATO_STATIC_NAME} : StaticLink$(ListObjects)

EOF

# Set initial value of __FILEID__
fileid=${LE_CONFIG_FILEID_RESERVED:-0}
for source in "${!LIBLEGATO_FILES[@]}"; do
    echo "build ${LIBLEGATO_FILES[$source]} : Compile $source"
    if [ "${LE_CONFIG_FILEID}" = y ]; then
        echo "  flags = $CFLAGS -D__FILEID__=$fileid"
    else
        echo "  flags = $CFLAGS"
    fi
    echo
    ((fileid++))
done >> $NINJA_SCRIPT

cat <<EOF  >> $NINJA_SCRIPT
build $NINJA_SCRIPT : RegenNinjaScript | $NINJA_SCRIPT_GENERATOR $used_ninja_configs $modules
EOF

trap - EXIT
